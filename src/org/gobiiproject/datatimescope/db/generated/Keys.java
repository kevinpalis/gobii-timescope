/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.tables.Analysis;
import org.gobiiproject.datatimescope.db.generated.tables.Contact;
import org.gobiiproject.datatimescope.db.generated.tables.Cv;
import org.gobiiproject.datatimescope.db.generated.tables.Cvgroup;
import org.gobiiproject.datatimescope.db.generated.tables.Databasechangeloglock;
import org.gobiiproject.datatimescope.db.generated.tables.Dataset;
import org.gobiiproject.datatimescope.db.generated.tables.Dbxref;
import org.gobiiproject.datatimescope.db.generated.tables.Display;
import org.gobiiproject.datatimescope.db.generated.tables.Dnarun;
import org.gobiiproject.datatimescope.db.generated.tables.Dnasample;
import org.gobiiproject.datatimescope.db.generated.tables.Experiment;
import org.gobiiproject.datatimescope.db.generated.tables.Germplasm;
import org.gobiiproject.datatimescope.db.generated.tables.Gobiiprop;
import org.gobiiproject.datatimescope.db.generated.tables.Job;
import org.gobiiproject.datatimescope.db.generated.tables.LinkageGroup;
import org.gobiiproject.datatimescope.db.generated.tables.Manifest;
import org.gobiiproject.datatimescope.db.generated.tables.Mapset;
import org.gobiiproject.datatimescope.db.generated.tables.Marker;
import org.gobiiproject.datatimescope.db.generated.tables.MarkerGroup;
import org.gobiiproject.datatimescope.db.generated.tables.MarkerLinkageGroup;
import org.gobiiproject.datatimescope.db.generated.tables.Organization;
import org.gobiiproject.datatimescope.db.generated.tables.Platform;
import org.gobiiproject.datatimescope.db.generated.tables.Project;
import org.gobiiproject.datatimescope.db.generated.tables.Protocol;
import org.gobiiproject.datatimescope.db.generated.tables.Reference;
import org.gobiiproject.datatimescope.db.generated.tables.Role;
import org.gobiiproject.datatimescope.db.generated.tables.Timescoper;
import org.gobiiproject.datatimescope.db.generated.tables.Variant;
import org.gobiiproject.datatimescope.db.generated.tables.VendorProtocol;
import org.gobiiproject.datatimescope.db.generated.tables.records.AnalysisRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.ContactRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.CvRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.CvgroupRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.DatabasechangeloglockRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.DatasetRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.DbxrefRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.DisplayRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.DnarunRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.DnasampleRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.ExperimentRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.GermplasmRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.GobiipropRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.JobRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.LinkageGroupRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.ManifestRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.MapsetRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.MarkerGroupRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.MarkerLinkageGroupRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.MarkerRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.OrganizationRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.PlatformRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.ProjectRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.ProtocolRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.ReferenceRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.RoleRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.TimescoperRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.VariantRecord;
import org.gobiiproject.datatimescope.db.generated.tables.records.VendorProtocolRecord;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AnalysisRecord, Integer> IDENTITY_ANALYSIS = Identities0.IDENTITY_ANALYSIS;
    public static final Identity<ContactRecord, Integer> IDENTITY_CONTACT = Identities0.IDENTITY_CONTACT;
    public static final Identity<CvRecord, Integer> IDENTITY_CV = Identities0.IDENTITY_CV;
    public static final Identity<CvgroupRecord, Integer> IDENTITY_CVGROUP = Identities0.IDENTITY_CVGROUP;
    public static final Identity<DatasetRecord, Integer> IDENTITY_DATASET = Identities0.IDENTITY_DATASET;
    public static final Identity<DbxrefRecord, Integer> IDENTITY_DBXREF = Identities0.IDENTITY_DBXREF;
    public static final Identity<DisplayRecord, Integer> IDENTITY_DISPLAY = Identities0.IDENTITY_DISPLAY;
    public static final Identity<DnarunRecord, Integer> IDENTITY_DNARUN = Identities0.IDENTITY_DNARUN;
    public static final Identity<DnasampleRecord, Integer> IDENTITY_DNASAMPLE = Identities0.IDENTITY_DNASAMPLE;
    public static final Identity<ExperimentRecord, Integer> IDENTITY_EXPERIMENT = Identities0.IDENTITY_EXPERIMENT;
    public static final Identity<GermplasmRecord, Integer> IDENTITY_GERMPLASM = Identities0.IDENTITY_GERMPLASM;
    public static final Identity<GobiipropRecord, Integer> IDENTITY_GOBIIPROP = Identities0.IDENTITY_GOBIIPROP;
    public static final Identity<JobRecord, Integer> IDENTITY_JOB = Identities0.IDENTITY_JOB;
    public static final Identity<LinkageGroupRecord, Integer> IDENTITY_LINKAGE_GROUP = Identities0.IDENTITY_LINKAGE_GROUP;
    public static final Identity<ManifestRecord, Integer> IDENTITY_MANIFEST = Identities0.IDENTITY_MANIFEST;
    public static final Identity<MapsetRecord, Integer> IDENTITY_MAPSET = Identities0.IDENTITY_MAPSET;
    public static final Identity<MarkerRecord, Integer> IDENTITY_MARKER = Identities0.IDENTITY_MARKER;
    public static final Identity<MarkerGroupRecord, Integer> IDENTITY_MARKER_GROUP = Identities0.IDENTITY_MARKER_GROUP;
    public static final Identity<MarkerLinkageGroupRecord, Integer> IDENTITY_MARKER_LINKAGE_GROUP = Identities0.IDENTITY_MARKER_LINKAGE_GROUP;
    public static final Identity<OrganizationRecord, Integer> IDENTITY_ORGANIZATION = Identities0.IDENTITY_ORGANIZATION;
    public static final Identity<PlatformRecord, Integer> IDENTITY_PLATFORM = Identities0.IDENTITY_PLATFORM;
    public static final Identity<ProjectRecord, Integer> IDENTITY_PROJECT = Identities0.IDENTITY_PROJECT;
    public static final Identity<ProtocolRecord, Integer> IDENTITY_PROTOCOL = Identities0.IDENTITY_PROTOCOL;
    public static final Identity<ReferenceRecord, Integer> IDENTITY_REFERENCE = Identities0.IDENTITY_REFERENCE;
    public static final Identity<RoleRecord, Integer> IDENTITY_ROLE = Identities0.IDENTITY_ROLE;
    public static final Identity<TimescoperRecord, Integer> IDENTITY_TIMESCOPER = Identities0.IDENTITY_TIMESCOPER;
    public static final Identity<VariantRecord, Integer> IDENTITY_VARIANT = Identities0.IDENTITY_VARIANT;
    public static final Identity<VendorProtocolRecord, Integer> IDENTITY_VENDOR_PROTOCOL = Identities0.IDENTITY_VENDOR_PROTOCOL;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AnalysisRecord> PK_ANALYSIS = UniqueKeys0.PK_ANALYSIS;
    public static final UniqueKey<ContactRecord> PK_CONTACT = UniqueKeys0.PK_CONTACT;
    public static final UniqueKey<ContactRecord> EMAIL_KEY = UniqueKeys0.EMAIL_KEY;
    public static final UniqueKey<ContactRecord> CONTACT_USERNAME_KEY = UniqueKeys0.CONTACT_USERNAME_KEY;
    public static final UniqueKey<CvRecord> PK_CV = UniqueKeys0.PK_CV;
    public static final UniqueKey<CvRecord> UNIQUE_CVTERM_TERM_CVGROUPID = UniqueKeys0.UNIQUE_CVTERM_TERM_CVGROUPID;
    public static final UniqueKey<CvgroupRecord> CV_PKEY = UniqueKeys0.CV_PKEY;
    public static final UniqueKey<CvgroupRecord> UNIQUE_CVGROUP_NAME_TYPE = UniqueKeys0.UNIQUE_CVGROUP_NAME_TYPE;
    public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = UniqueKeys0.PK_DATABASECHANGELOGLOCK;
    public static final UniqueKey<DatasetRecord> PK_DATASET = UniqueKeys0.PK_DATASET;
    public static final UniqueKey<DbxrefRecord> DBXREF_PKEY = UniqueKeys0.DBXREF_PKEY;
    public static final UniqueKey<DbxrefRecord> UNIQUE_DBXREF_ACCESSION_VERSION = UniqueKeys0.UNIQUE_DBXREF_ACCESSION_VERSION;
    public static final UniqueKey<DisplayRecord> PK_TABLE_DISPLAY = UniqueKeys0.PK_TABLE_DISPLAY;
    public static final UniqueKey<DnarunRecord> PK_DNARUN = UniqueKeys0.PK_DNARUN;
    public static final UniqueKey<DnasampleRecord> PK_DNASAMPLE = UniqueKeys0.PK_DNASAMPLE;
    public static final UniqueKey<ExperimentRecord> PK_EXPERIMENT = UniqueKeys0.PK_EXPERIMENT;
    public static final UniqueKey<GermplasmRecord> PK_GERMPLASM = UniqueKeys0.PK_GERMPLASM;
    public static final UniqueKey<GobiipropRecord> GOBIIPROP_PKEY = UniqueKeys0.GOBIIPROP_PKEY;
    public static final UniqueKey<GobiipropRecord> GOBIIPROP_C1 = UniqueKeys0.GOBIIPROP_C1;
    public static final UniqueKey<JobRecord> PK_JOB = UniqueKeys0.PK_JOB;
    public static final UniqueKey<JobRecord> UNIQUE_JOB_NAME = UniqueKeys0.UNIQUE_JOB_NAME;
    public static final UniqueKey<LinkageGroupRecord> PK_LINKAGE_GROUP = UniqueKeys0.PK_LINKAGE_GROUP;
    public static final UniqueKey<ManifestRecord> PK_MANIFEST = UniqueKeys0.PK_MANIFEST;
    public static final UniqueKey<MapsetRecord> PK_MAP = UniqueKeys0.PK_MAP;
    public static final UniqueKey<MarkerRecord> PK_MARKER = UniqueKeys0.PK_MARKER;
    public static final UniqueKey<MarkerGroupRecord> PK_MARKER_GROUP = UniqueKeys0.PK_MARKER_GROUP;
    public static final UniqueKey<MarkerGroupRecord> UNQ_MARKERGRP_NAME = UniqueKeys0.UNQ_MARKERGRP_NAME;
    public static final UniqueKey<MarkerLinkageGroupRecord> PK_MARKER_MAP = UniqueKeys0.PK_MARKER_MAP;
    public static final UniqueKey<OrganizationRecord> ORGANIZATION_PKEY = UniqueKeys0.ORGANIZATION_PKEY;
    public static final UniqueKey<OrganizationRecord> ORGANIZATION_NAME_KEY = UniqueKeys0.ORGANIZATION_NAME_KEY;
    public static final UniqueKey<PlatformRecord> PK_PLATFORM = UniqueKeys0.PK_PLATFORM;
    public static final UniqueKey<ProjectRecord> PK_PROJECT = UniqueKeys0.PK_PROJECT;
    public static final UniqueKey<ProjectRecord> PI_PROJECT_NAME_KEY = UniqueKeys0.PI_PROJECT_NAME_KEY;
    public static final UniqueKey<ProtocolRecord> PK_PROTOCOL = UniqueKeys0.PK_PROTOCOL;
    public static final UniqueKey<ReferenceRecord> PK_REFERENCE = UniqueKeys0.PK_REFERENCE;
    public static final UniqueKey<RoleRecord> PK_ROLE = UniqueKeys0.PK_ROLE;
    public static final UniqueKey<TimescoperRecord> PK_TIMESCOPER = UniqueKeys0.PK_TIMESCOPER;
    public static final UniqueKey<TimescoperRecord> USERNAME_KEY = UniqueKeys0.USERNAME_KEY;
    public static final UniqueKey<VariantRecord> PK_VARIANT = UniqueKeys0.PK_VARIANT;
    public static final UniqueKey<VendorProtocolRecord> PK_VENDOR_PROTOCOL = UniqueKeys0.PK_VENDOR_PROTOCOL;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AnalysisRecord, CvRecord> ANALYSIS__ANALYSIS_ANALYSIS_TYPE_ID_FKEY = ForeignKeys0.ANALYSIS__ANALYSIS_ANALYSIS_TYPE_ID_FKEY;
    public static final ForeignKey<ContactRecord, OrganizationRecord> CONTACT__CONTACT_ORGANIZATION_ID_FKEY = ForeignKeys0.CONTACT__CONTACT_ORGANIZATION_ID_FKEY;
    public static final ForeignKey<CvRecord, CvgroupRecord> CV__CV_CVGROUPID_FKEY = ForeignKeys0.CV__CV_CVGROUPID_FKEY;
    public static final ForeignKey<CvRecord, DbxrefRecord> CV__CV_DBXREFID_FKEY = ForeignKeys0.CV__CV_DBXREFID_FKEY;
    public static final ForeignKey<DatasetRecord, ExperimentRecord> DATASET__DATASET_EXPERIMENT_ID_FKEY = ForeignKeys0.DATASET__DATASET_EXPERIMENT_ID_FKEY;
    public static final ForeignKey<DatasetRecord, AnalysisRecord> DATASET__DATASET_CALLINGANALYSIS_ID_FKEY = ForeignKeys0.DATASET__DATASET_CALLINGANALYSIS_ID_FKEY;
    public static final ForeignKey<DatasetRecord, JobRecord> DATASET__DATASET_JOB_ID_FK = ForeignKeys0.DATASET__DATASET_JOB_ID_FK;
    public static final ForeignKey<DnarunRecord, ExperimentRecord> DNARUN__DNARUN_EXPERIMENT_ID_FKEY = ForeignKeys0.DNARUN__DNARUN_EXPERIMENT_ID_FKEY;
    public static final ForeignKey<DnarunRecord, DnasampleRecord> DNARUN__DNARUN_DNASAMPLE_ID_FKEY = ForeignKeys0.DNARUN__DNARUN_DNASAMPLE_ID_FKEY;
    public static final ForeignKey<DnasampleRecord, ProjectRecord> DNASAMPLE__DNASAMPLE_PROJECT_ID_FKEY = ForeignKeys0.DNASAMPLE__DNASAMPLE_PROJECT_ID_FKEY;
    public static final ForeignKey<DnasampleRecord, GermplasmRecord> DNASAMPLE__DNASAMPLE_GERMPLASM_ID_FKEY = ForeignKeys0.DNASAMPLE__DNASAMPLE_GERMPLASM_ID_FKEY;
    public static final ForeignKey<ExperimentRecord, ProjectRecord> EXPERIMENT__EXPERIMENT_PROJECT_ID_FKEY = ForeignKeys0.EXPERIMENT__EXPERIMENT_PROJECT_ID_FKEY;
    public static final ForeignKey<ExperimentRecord, ManifestRecord> EXPERIMENT__EXPERIMENT_MANIFEST_ID_FKEY = ForeignKeys0.EXPERIMENT__EXPERIMENT_MANIFEST_ID_FKEY;
    public static final ForeignKey<ExperimentRecord, VendorProtocolRecord> EXPERIMENT__EXPERIMENT_VENDOR_PROTOCOL_ID_FKEY = ForeignKeys0.EXPERIMENT__EXPERIMENT_VENDOR_PROTOCOL_ID_FKEY;
    public static final ForeignKey<GermplasmRecord, CvRecord> GERMPLASM__GERMPLASM_SPECIES_ID_FKEY = ForeignKeys0.GERMPLASM__GERMPLASM_SPECIES_ID_FKEY;
    public static final ForeignKey<GermplasmRecord, CvRecord> GERMPLASM__GERMPLASM_GERMPLASM_TYPE_ID_FKEY = ForeignKeys0.GERMPLASM__GERMPLASM_GERMPLASM_TYPE_ID_FKEY;
    public static final ForeignKey<JobRecord, CvRecord> JOB__JOB_TYPE_ID_FK = ForeignKeys0.JOB__JOB_TYPE_ID_FK;
    public static final ForeignKey<JobRecord, CvRecord> JOB__JOB_PAYLOAD_TYPE_ID_FK = ForeignKeys0.JOB__JOB_PAYLOAD_TYPE_ID_FK;
    public static final ForeignKey<JobRecord, CvRecord> JOB__JOB_STATUS_FK = ForeignKeys0.JOB__JOB_STATUS_FK;
    public static final ForeignKey<JobRecord, ContactRecord> JOB__JOB_SUBMITTED_BY_FX = ForeignKeys0.JOB__JOB_SUBMITTED_BY_FX;
    public static final ForeignKey<LinkageGroupRecord, MapsetRecord> LINKAGE_GROUP__LINKAGE_GROUP_MAP_ID_FKEY = ForeignKeys0.LINKAGE_GROUP__LINKAGE_GROUP_MAP_ID_FKEY;
    public static final ForeignKey<MapsetRecord, ReferenceRecord> MAPSET__MAP_REFERENCE_ID_FKEY = ForeignKeys0.MAPSET__MAP_REFERENCE_ID_FKEY;
    public static final ForeignKey<MapsetRecord, CvRecord> MAPSET__MAP_MAP_TYPE_FKEY = ForeignKeys0.MAPSET__MAP_MAP_TYPE_FKEY;
    public static final ForeignKey<MarkerRecord, PlatformRecord> MARKER__MARKER_PLATFORM_ID_FKEY = ForeignKeys0.MARKER__MARKER_PLATFORM_ID_FKEY;
    public static final ForeignKey<MarkerRecord, VariantRecord> MARKER__MARKER_VARIANT_ID_FKEY = ForeignKeys0.MARKER__MARKER_VARIANT_ID_FKEY;
    public static final ForeignKey<MarkerRecord, ReferenceRecord> MARKER__MARKER_REFERENCE_ID_FKEY = ForeignKeys0.MARKER__MARKER_REFERENCE_ID_FKEY;
    public static final ForeignKey<MarkerRecord, CvRecord> MARKER__MARKER_STRAND_ID_FKEY = ForeignKeys0.MARKER__MARKER_STRAND_ID_FKEY;
    public static final ForeignKey<MarkerLinkageGroupRecord, MarkerRecord> MARKER_LINKAGE_GROUP__MARKER_MAP_MARKER_ID_FKEY = ForeignKeys0.MARKER_LINKAGE_GROUP__MARKER_MAP_MARKER_ID_FKEY;
    public static final ForeignKey<MarkerLinkageGroupRecord, LinkageGroupRecord> MARKER_LINKAGE_GROUP__MARKER_LINKAGE_GROUP_LINKAGE_GROUP_ID_FKEY = ForeignKeys0.MARKER_LINKAGE_GROUP__MARKER_LINKAGE_GROUP_LINKAGE_GROUP_ID_FKEY;
    public static final ForeignKey<PlatformRecord, CvRecord> PLATFORM__PLATFORM_TYPE_ID_FKEY = ForeignKeys0.PLATFORM__PLATFORM_TYPE_ID_FKEY;
    public static final ForeignKey<ProjectRecord, ContactRecord> PROJECT__PROJECT_PI_CONTACT = ForeignKeys0.PROJECT__PROJECT_PI_CONTACT;
    public static final ForeignKey<ProtocolRecord, CvRecord> PROTOCOL__PROTOCOL_TYPE_ID_FKEY = ForeignKeys0.PROTOCOL__PROTOCOL_TYPE_ID_FKEY;
    public static final ForeignKey<ProtocolRecord, PlatformRecord> PROTOCOL__PROTOCOL_PLATFORM_ID_FKEY = ForeignKeys0.PROTOCOL__PROTOCOL_PLATFORM_ID_FKEY;
    public static final ForeignKey<VendorProtocolRecord, OrganizationRecord> VENDOR_PROTOCOL__VENDOR_PROTOCOL_VENDOR_ID_FKEY = ForeignKeys0.VENDOR_PROTOCOL__VENDOR_PROTOCOL_VENDOR_ID_FKEY;
    public static final ForeignKey<VendorProtocolRecord, ProtocolRecord> VENDOR_PROTOCOL__VENDOR_PROTOCOL_PROTOCOL_ID_FKEY = ForeignKeys0.VENDOR_PROTOCOL__VENDOR_PROTOCOL_PROTOCOL_ID_FKEY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AnalysisRecord, Integer> IDENTITY_ANALYSIS = createIdentity(Analysis.ANALYSIS, Analysis.ANALYSIS.ANALYSIS_ID);
        public static Identity<ContactRecord, Integer> IDENTITY_CONTACT = createIdentity(Contact.CONTACT, Contact.CONTACT.CONTACT_ID);
        public static Identity<CvRecord, Integer> IDENTITY_CV = createIdentity(Cv.CV, Cv.CV.CV_ID);
        public static Identity<CvgroupRecord, Integer> IDENTITY_CVGROUP = createIdentity(Cvgroup.CVGROUP, Cvgroup.CVGROUP.CVGROUP_ID);
        public static Identity<DatasetRecord, Integer> IDENTITY_DATASET = createIdentity(Dataset.DATASET, Dataset.DATASET.DATASET_ID);
        public static Identity<DbxrefRecord, Integer> IDENTITY_DBXREF = createIdentity(Dbxref.DBXREF, Dbxref.DBXREF.DBXREF_ID);
        public static Identity<DisplayRecord, Integer> IDENTITY_DISPLAY = createIdentity(Display.DISPLAY, Display.DISPLAY.DISPLAY_ID);
        public static Identity<DnarunRecord, Integer> IDENTITY_DNARUN = createIdentity(Dnarun.DNARUN, Dnarun.DNARUN.DNARUN_ID);
        public static Identity<DnasampleRecord, Integer> IDENTITY_DNASAMPLE = createIdentity(Dnasample.DNASAMPLE, Dnasample.DNASAMPLE.DNASAMPLE_ID);
        public static Identity<ExperimentRecord, Integer> IDENTITY_EXPERIMENT = createIdentity(Experiment.EXPERIMENT, Experiment.EXPERIMENT.EXPERIMENT_ID);
        public static Identity<GermplasmRecord, Integer> IDENTITY_GERMPLASM = createIdentity(Germplasm.GERMPLASM, Germplasm.GERMPLASM.GERMPLASM_ID);
        public static Identity<GobiipropRecord, Integer> IDENTITY_GOBIIPROP = createIdentity(Gobiiprop.GOBIIPROP, Gobiiprop.GOBIIPROP.GOBIIPROP_ID);
        public static Identity<JobRecord, Integer> IDENTITY_JOB = createIdentity(Job.JOB, Job.JOB.JOB_ID);
        public static Identity<LinkageGroupRecord, Integer> IDENTITY_LINKAGE_GROUP = createIdentity(LinkageGroup.LINKAGE_GROUP, LinkageGroup.LINKAGE_GROUP.LINKAGE_GROUP_ID);
        public static Identity<ManifestRecord, Integer> IDENTITY_MANIFEST = createIdentity(Manifest.MANIFEST, Manifest.MANIFEST.MANIFEST_ID);
        public static Identity<MapsetRecord, Integer> IDENTITY_MAPSET = createIdentity(Mapset.MAPSET, Mapset.MAPSET.MAPSET_ID);
        public static Identity<MarkerRecord, Integer> IDENTITY_MARKER = createIdentity(Marker.MARKER, Marker.MARKER.MARKER_ID);
        public static Identity<MarkerGroupRecord, Integer> IDENTITY_MARKER_GROUP = createIdentity(MarkerGroup.MARKER_GROUP, MarkerGroup.MARKER_GROUP.MARKER_GROUP_ID);
        public static Identity<MarkerLinkageGroupRecord, Integer> IDENTITY_MARKER_LINKAGE_GROUP = createIdentity(MarkerLinkageGroup.MARKER_LINKAGE_GROUP, MarkerLinkageGroup.MARKER_LINKAGE_GROUP.MARKER_LINKAGE_GROUP_ID);
        public static Identity<OrganizationRecord, Integer> IDENTITY_ORGANIZATION = createIdentity(Organization.ORGANIZATION, Organization.ORGANIZATION.ORGANIZATION_ID);
        public static Identity<PlatformRecord, Integer> IDENTITY_PLATFORM = createIdentity(Platform.PLATFORM, Platform.PLATFORM.PLATFORM_ID);
        public static Identity<ProjectRecord, Integer> IDENTITY_PROJECT = createIdentity(Project.PROJECT, Project.PROJECT.PROJECT_ID);
        public static Identity<ProtocolRecord, Integer> IDENTITY_PROTOCOL = createIdentity(Protocol.PROTOCOL, Protocol.PROTOCOL.PROTOCOL_ID);
        public static Identity<ReferenceRecord, Integer> IDENTITY_REFERENCE = createIdentity(Reference.REFERENCE, Reference.REFERENCE.REFERENCE_ID);
        public static Identity<RoleRecord, Integer> IDENTITY_ROLE = createIdentity(Role.ROLE, Role.ROLE.ROLE_ID);
        public static Identity<TimescoperRecord, Integer> IDENTITY_TIMESCOPER = createIdentity(Timescoper.TIMESCOPER, Timescoper.TIMESCOPER.TIMESCOPER_ID);
        public static Identity<VariantRecord, Integer> IDENTITY_VARIANT = createIdentity(Variant.VARIANT, Variant.VARIANT.VARIANT_ID);
        public static Identity<VendorProtocolRecord, Integer> IDENTITY_VENDOR_PROTOCOL = createIdentity(VendorProtocol.VENDOR_PROTOCOL, VendorProtocol.VENDOR_PROTOCOL.VENDOR_PROTOCOL_ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AnalysisRecord> PK_ANALYSIS = createUniqueKey(Analysis.ANALYSIS, "pk_analysis", Analysis.ANALYSIS.ANALYSIS_ID);
        public static final UniqueKey<ContactRecord> PK_CONTACT = createUniqueKey(Contact.CONTACT, "pk_contact", Contact.CONTACT.CONTACT_ID);
        public static final UniqueKey<ContactRecord> EMAIL_KEY = createUniqueKey(Contact.CONTACT, "email_key", Contact.CONTACT.EMAIL);
        public static final UniqueKey<ContactRecord> CONTACT_USERNAME_KEY = createUniqueKey(Contact.CONTACT, "contact_username_key", Contact.CONTACT.USERNAME);
        public static final UniqueKey<CvRecord> PK_CV = createUniqueKey(Cv.CV, "pk_cv", Cv.CV.CV_ID);
        public static final UniqueKey<CvRecord> UNIQUE_CVTERM_TERM_CVGROUPID = createUniqueKey(Cv.CV, "unique_cvterm_term_cvgroupid", Cv.CV.TERM, Cv.CV.CVGROUP_ID);
        public static final UniqueKey<CvgroupRecord> CV_PKEY = createUniqueKey(Cvgroup.CVGROUP, "cv_pkey", Cvgroup.CVGROUP.CVGROUP_ID);
        public static final UniqueKey<CvgroupRecord> UNIQUE_CVGROUP_NAME_TYPE = createUniqueKey(Cvgroup.CVGROUP, "unique_cvgroup_name_type", Cvgroup.CVGROUP.NAME, Cvgroup.CVGROUP.TYPE);
        public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, "pk_databasechangeloglock", Databasechangeloglock.DATABASECHANGELOGLOCK.ID);
        public static final UniqueKey<DatasetRecord> PK_DATASET = createUniqueKey(Dataset.DATASET, "pk_dataset", Dataset.DATASET.DATASET_ID);
        public static final UniqueKey<DbxrefRecord> DBXREF_PKEY = createUniqueKey(Dbxref.DBXREF, "dbxref_pkey", Dbxref.DBXREF.DBXREF_ID);
        public static final UniqueKey<DbxrefRecord> UNIQUE_DBXREF_ACCESSION_VERSION = createUniqueKey(Dbxref.DBXREF, "unique_dbxref_accession_version", Dbxref.DBXREF.ACCESSION, Dbxref.DBXREF.VER);
        public static final UniqueKey<DisplayRecord> PK_TABLE_DISPLAY = createUniqueKey(Display.DISPLAY, "pk_table_display", Display.DISPLAY.DISPLAY_ID);
        public static final UniqueKey<DnarunRecord> PK_DNARUN = createUniqueKey(Dnarun.DNARUN, "pk_dnarun", Dnarun.DNARUN.DNARUN_ID);
        public static final UniqueKey<DnasampleRecord> PK_DNASAMPLE = createUniqueKey(Dnasample.DNASAMPLE, "pk_dnasample", Dnasample.DNASAMPLE.DNASAMPLE_ID);
        public static final UniqueKey<ExperimentRecord> PK_EXPERIMENT = createUniqueKey(Experiment.EXPERIMENT, "pk_experiment", Experiment.EXPERIMENT.EXPERIMENT_ID);
        public static final UniqueKey<GermplasmRecord> PK_GERMPLASM = createUniqueKey(Germplasm.GERMPLASM, "pk_germplasm", Germplasm.GERMPLASM.GERMPLASM_ID);
        public static final UniqueKey<GobiipropRecord> GOBIIPROP_PKEY = createUniqueKey(Gobiiprop.GOBIIPROP, "gobiiprop_pkey", Gobiiprop.GOBIIPROP.GOBIIPROP_ID);
        public static final UniqueKey<GobiipropRecord> GOBIIPROP_C1 = createUniqueKey(Gobiiprop.GOBIIPROP, "gobiiprop_c1", Gobiiprop.GOBIIPROP.TYPE_ID, Gobiiprop.GOBIIPROP.RANK);
        public static final UniqueKey<JobRecord> PK_JOB = createUniqueKey(Job.JOB, "pk_job", Job.JOB.JOB_ID);
        public static final UniqueKey<JobRecord> UNIQUE_JOB_NAME = createUniqueKey(Job.JOB, "unique_job_name", Job.JOB.NAME);
        public static final UniqueKey<LinkageGroupRecord> PK_LINKAGE_GROUP = createUniqueKey(LinkageGroup.LINKAGE_GROUP, "pk_linkage_group", LinkageGroup.LINKAGE_GROUP.LINKAGE_GROUP_ID);
        public static final UniqueKey<ManifestRecord> PK_MANIFEST = createUniqueKey(Manifest.MANIFEST, "pk_manifest", Manifest.MANIFEST.MANIFEST_ID);
        public static final UniqueKey<MapsetRecord> PK_MAP = createUniqueKey(Mapset.MAPSET, "pk_map", Mapset.MAPSET.MAPSET_ID);
        public static final UniqueKey<MarkerRecord> PK_MARKER = createUniqueKey(Marker.MARKER, "pk_marker", Marker.MARKER.MARKER_ID);
        public static final UniqueKey<MarkerGroupRecord> PK_MARKER_GROUP = createUniqueKey(MarkerGroup.MARKER_GROUP, "pk_marker_group", MarkerGroup.MARKER_GROUP.MARKER_GROUP_ID);
        public static final UniqueKey<MarkerGroupRecord> UNQ_MARKERGRP_NAME = createUniqueKey(MarkerGroup.MARKER_GROUP, "unq_markergrp_name", MarkerGroup.MARKER_GROUP.NAME);
        public static final UniqueKey<MarkerLinkageGroupRecord> PK_MARKER_MAP = createUniqueKey(MarkerLinkageGroup.MARKER_LINKAGE_GROUP, "pk_marker_map", MarkerLinkageGroup.MARKER_LINKAGE_GROUP.MARKER_LINKAGE_GROUP_ID);
        public static final UniqueKey<OrganizationRecord> ORGANIZATION_PKEY = createUniqueKey(Organization.ORGANIZATION, "organization_pkey", Organization.ORGANIZATION.ORGANIZATION_ID);
        public static final UniqueKey<OrganizationRecord> ORGANIZATION_NAME_KEY = createUniqueKey(Organization.ORGANIZATION, "organization_name_key", Organization.ORGANIZATION.NAME);
        public static final UniqueKey<PlatformRecord> PK_PLATFORM = createUniqueKey(Platform.PLATFORM, "pk_platform", Platform.PLATFORM.PLATFORM_ID);
        public static final UniqueKey<ProjectRecord> PK_PROJECT = createUniqueKey(Project.PROJECT, "pk_project", Project.PROJECT.PROJECT_ID);
        public static final UniqueKey<ProjectRecord> PI_PROJECT_NAME_KEY = createUniqueKey(Project.PROJECT, "pi_project_name_key", Project.PROJECT.PI_CONTACT, Project.PROJECT.NAME);
        public static final UniqueKey<ProtocolRecord> PK_PROTOCOL = createUniqueKey(Protocol.PROTOCOL, "pk_protocol", Protocol.PROTOCOL.PROTOCOL_ID);
        public static final UniqueKey<ReferenceRecord> PK_REFERENCE = createUniqueKey(Reference.REFERENCE, "pk_reference", Reference.REFERENCE.REFERENCE_ID);
        public static final UniqueKey<RoleRecord> PK_ROLE = createUniqueKey(Role.ROLE, "pk_role", Role.ROLE.ROLE_ID);
        public static final UniqueKey<TimescoperRecord> PK_TIMESCOPER = createUniqueKey(Timescoper.TIMESCOPER, "pk_timescoper", Timescoper.TIMESCOPER.TIMESCOPER_ID);
        public static final UniqueKey<TimescoperRecord> USERNAME_KEY = createUniqueKey(Timescoper.TIMESCOPER, "username_key", Timescoper.TIMESCOPER.USERNAME);
        public static final UniqueKey<VariantRecord> PK_VARIANT = createUniqueKey(Variant.VARIANT, "pk_variant", Variant.VARIANT.VARIANT_ID);
        public static final UniqueKey<VendorProtocolRecord> PK_VENDOR_PROTOCOL = createUniqueKey(VendorProtocol.VENDOR_PROTOCOL, "pk_vendor_protocol", VendorProtocol.VENDOR_PROTOCOL.VENDOR_PROTOCOL_ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<AnalysisRecord, CvRecord> ANALYSIS__ANALYSIS_ANALYSIS_TYPE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Analysis.ANALYSIS, "analysis__analysis_analysis_type_id_fkey", Analysis.ANALYSIS.TYPE_ID);
        public static final ForeignKey<ContactRecord, OrganizationRecord> CONTACT__CONTACT_ORGANIZATION_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.ORGANIZATION_PKEY, Contact.CONTACT, "contact__contact_organization_id_fkey", Contact.CONTACT.ORGANIZATION_ID);
        public static final ForeignKey<CvRecord, CvgroupRecord> CV__CV_CVGROUPID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.CV_PKEY, Cv.CV, "cv__cv_cvgroupid_fkey", Cv.CV.CVGROUP_ID);
        public static final ForeignKey<CvRecord, DbxrefRecord> CV__CV_DBXREFID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.DBXREF_PKEY, Cv.CV, "cv__cv_dbxrefid_fkey", Cv.CV.DBXREF_ID);
        public static final ForeignKey<DatasetRecord, ExperimentRecord> DATASET__DATASET_EXPERIMENT_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_EXPERIMENT, Dataset.DATASET, "dataset__dataset_experiment_id_fkey", Dataset.DATASET.EXPERIMENT_ID);
        public static final ForeignKey<DatasetRecord, AnalysisRecord> DATASET__DATASET_CALLINGANALYSIS_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_ANALYSIS, Dataset.DATASET, "dataset__dataset_callinganalysis_id_fkey", Dataset.DATASET.CALLINGANALYSIS_ID);
        public static final ForeignKey<DatasetRecord, JobRecord> DATASET__DATASET_JOB_ID_FK = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_JOB, Dataset.DATASET, "dataset__dataset_job_id_fk", Dataset.DATASET.JOB_ID);
        public static final ForeignKey<DnarunRecord, ExperimentRecord> DNARUN__DNARUN_EXPERIMENT_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_EXPERIMENT, Dnarun.DNARUN, "dnarun__dnarun_experiment_id_fkey", Dnarun.DNARUN.EXPERIMENT_ID);
        public static final ForeignKey<DnarunRecord, DnasampleRecord> DNARUN__DNARUN_DNASAMPLE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_DNASAMPLE, Dnarun.DNARUN, "dnarun__dnarun_dnasample_id_fkey", Dnarun.DNARUN.DNASAMPLE_ID);
        public static final ForeignKey<DnasampleRecord, ProjectRecord> DNASAMPLE__DNASAMPLE_PROJECT_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_PROJECT, Dnasample.DNASAMPLE, "dnasample__dnasample_project_id_fkey", Dnasample.DNASAMPLE.PROJECT_ID);
        public static final ForeignKey<DnasampleRecord, GermplasmRecord> DNASAMPLE__DNASAMPLE_GERMPLASM_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_GERMPLASM, Dnasample.DNASAMPLE, "dnasample__dnasample_germplasm_id_fkey", Dnasample.DNASAMPLE.GERMPLASM_ID);
        public static final ForeignKey<ExperimentRecord, ProjectRecord> EXPERIMENT__EXPERIMENT_PROJECT_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_PROJECT, Experiment.EXPERIMENT, "experiment__experiment_project_id_fkey", Experiment.EXPERIMENT.PROJECT_ID);
        public static final ForeignKey<ExperimentRecord, ManifestRecord> EXPERIMENT__EXPERIMENT_MANIFEST_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_MANIFEST, Experiment.EXPERIMENT, "experiment__experiment_manifest_id_fkey", Experiment.EXPERIMENT.MANIFEST_ID);
        public static final ForeignKey<ExperimentRecord, VendorProtocolRecord> EXPERIMENT__EXPERIMENT_VENDOR_PROTOCOL_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_VENDOR_PROTOCOL, Experiment.EXPERIMENT, "experiment__experiment_vendor_protocol_id_fkey", Experiment.EXPERIMENT.VENDOR_PROTOCOL_ID);
        public static final ForeignKey<GermplasmRecord, CvRecord> GERMPLASM__GERMPLASM_SPECIES_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Germplasm.GERMPLASM, "germplasm__germplasm_species_id_fkey", Germplasm.GERMPLASM.SPECIES_ID);
        public static final ForeignKey<GermplasmRecord, CvRecord> GERMPLASM__GERMPLASM_GERMPLASM_TYPE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Germplasm.GERMPLASM, "germplasm__germplasm_germplasm_type_id_fkey", Germplasm.GERMPLASM.TYPE_ID);
        public static final ForeignKey<JobRecord, CvRecord> JOB__JOB_TYPE_ID_FK = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Job.JOB, "job__job_type_id_fk", Job.JOB.TYPE_ID);
        public static final ForeignKey<JobRecord, CvRecord> JOB__JOB_PAYLOAD_TYPE_ID_FK = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Job.JOB, "job__job_payload_type_id_fk", Job.JOB.PAYLOAD_TYPE_ID);
        public static final ForeignKey<JobRecord, CvRecord> JOB__JOB_STATUS_FK = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Job.JOB, "job__job_status_fk", Job.JOB.STATUS);
        public static final ForeignKey<JobRecord, ContactRecord> JOB__JOB_SUBMITTED_BY_FX = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CONTACT, Job.JOB, "job__job_submitted_by_fx", Job.JOB.SUBMITTED_BY);
        public static final ForeignKey<LinkageGroupRecord, MapsetRecord> LINKAGE_GROUP__LINKAGE_GROUP_MAP_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_MAP, LinkageGroup.LINKAGE_GROUP, "linkage_group__linkage_group_map_id_fkey", LinkageGroup.LINKAGE_GROUP.MAP_ID);
        public static final ForeignKey<MapsetRecord, ReferenceRecord> MAPSET__MAP_REFERENCE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_REFERENCE, Mapset.MAPSET, "mapset__map_reference_id_fkey", Mapset.MAPSET.REFERENCE_ID);
        public static final ForeignKey<MapsetRecord, CvRecord> MAPSET__MAP_MAP_TYPE_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Mapset.MAPSET, "mapset__map_map_type_fkey", Mapset.MAPSET.TYPE_ID);
        public static final ForeignKey<MarkerRecord, PlatformRecord> MARKER__MARKER_PLATFORM_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_PLATFORM, Marker.MARKER, "marker__marker_platform_id_fkey", Marker.MARKER.PLATFORM_ID);
        public static final ForeignKey<MarkerRecord, VariantRecord> MARKER__MARKER_VARIANT_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_VARIANT, Marker.MARKER, "marker__marker_variant_id_fkey", Marker.MARKER.VARIANT_ID);
        public static final ForeignKey<MarkerRecord, ReferenceRecord> MARKER__MARKER_REFERENCE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_REFERENCE, Marker.MARKER, "marker__marker_reference_id_fkey", Marker.MARKER.REFERENCE_ID);
        public static final ForeignKey<MarkerRecord, CvRecord> MARKER__MARKER_STRAND_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Marker.MARKER, "marker__marker_strand_id_fkey", Marker.MARKER.STRAND_ID);
        public static final ForeignKey<MarkerLinkageGroupRecord, MarkerRecord> MARKER_LINKAGE_GROUP__MARKER_MAP_MARKER_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_MARKER, MarkerLinkageGroup.MARKER_LINKAGE_GROUP, "marker_linkage_group__marker_map_marker_id_fkey", MarkerLinkageGroup.MARKER_LINKAGE_GROUP.MARKER_ID);
        public static final ForeignKey<MarkerLinkageGroupRecord, LinkageGroupRecord> MARKER_LINKAGE_GROUP__MARKER_LINKAGE_GROUP_LINKAGE_GROUP_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_LINKAGE_GROUP, MarkerLinkageGroup.MARKER_LINKAGE_GROUP, "marker_linkage_group__marker_linkage_group_linkage_group_id_fkey", MarkerLinkageGroup.MARKER_LINKAGE_GROUP.LINKAGE_GROUP_ID);
        public static final ForeignKey<PlatformRecord, CvRecord> PLATFORM__PLATFORM_TYPE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Platform.PLATFORM, "platform__platform_type_id_fkey", Platform.PLATFORM.TYPE_ID);
        public static final ForeignKey<ProjectRecord, ContactRecord> PROJECT__PROJECT_PI_CONTACT = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CONTACT, Project.PROJECT, "project__project_pi_contact", Project.PROJECT.PI_CONTACT);
        public static final ForeignKey<ProtocolRecord, CvRecord> PROTOCOL__PROTOCOL_TYPE_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_CV, Protocol.PROTOCOL, "protocol__protocol_type_id_fkey", Protocol.PROTOCOL.TYPE_ID);
        public static final ForeignKey<ProtocolRecord, PlatformRecord> PROTOCOL__PROTOCOL_PLATFORM_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_PLATFORM, Protocol.PROTOCOL, "protocol__protocol_platform_id_fkey", Protocol.PROTOCOL.PLATFORM_ID);
        public static final ForeignKey<VendorProtocolRecord, OrganizationRecord> VENDOR_PROTOCOL__VENDOR_PROTOCOL_VENDOR_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.ORGANIZATION_PKEY, VendorProtocol.VENDOR_PROTOCOL, "vendor_protocol__vendor_protocol_vendor_id_fkey", VendorProtocol.VENDOR_PROTOCOL.VENDOR_ID);
        public static final ForeignKey<VendorProtocolRecord, ProtocolRecord> VENDOR_PROTOCOL__VENDOR_PROTOCOL_PROTOCOL_ID_FKEY = createForeignKey(org.gobiiproject.datatimescope.db.generated.Keys.PK_PROTOCOL, VendorProtocol.VENDOR_PROTOCOL, "vendor_protocol__vendor_protocol_protocol_id_fkey", VendorProtocol.VENDOR_PROTOCOL.PROTOCOL_ID);
    }
}
