/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GetallmarkermetadatabydatasetandmapRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getallmarkermetadatabydatasetandmap extends TableImpl<GetallmarkermetadatabydatasetandmapRecord> {

    private static final long serialVersionUID = 1127604791;

    /**
     * The reference instance of <code>public.getallmarkermetadatabydatasetandmap</code>
     */
    public static final Getallmarkermetadatabydatasetandmap GETALLMARKERMETADATABYDATASETANDMAP = new Getallmarkermetadatabydatasetandmap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetallmarkermetadatabydatasetandmapRecord> getRecordType() {
        return GetallmarkermetadatabydatasetandmapRecord.class;
    }

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.marker_name</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> MARKER_NAME = createField("marker_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.linkage_group_name</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> LINKAGE_GROUP_NAME = createField("linkage_group_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.start</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, BigDecimal> START = createField("start", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.stop</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, BigDecimal> STOP = createField("stop", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.mapset_name</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> MAPSET_NAME = createField("mapset_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.platform_name</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> PLATFORM_NAME = createField("platform_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.variant_id</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, Integer> VARIANT_ID = createField("variant_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.code</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.ref</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> REF = createField("ref", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.alts</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> ALTS = createField("alts", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.sequence</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> SEQUENCE = createField("sequence", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.reference_name</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> REFERENCE_NAME = createField("reference_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, Object> PRIMERS = createField("primers", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, Object> PROBSETS = createField("probsets", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * The column <code>public.getallmarkermetadatabydatasetandmap.strand_name</code>.
     */
    public final TableField<GetallmarkermetadatabydatasetandmapRecord, String> STRAND_NAME = createField("strand_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.getallmarkermetadatabydatasetandmap</code> table reference
     */
    public Getallmarkermetadatabydatasetandmap() {
        this(DSL.name("getallmarkermetadatabydatasetandmap"), null);
    }

    /**
     * Create an aliased <code>public.getallmarkermetadatabydatasetandmap</code> table reference
     */
    public Getallmarkermetadatabydatasetandmap(String alias) {
        this(DSL.name(alias), GETALLMARKERMETADATABYDATASETANDMAP);
    }

    /**
     * Create an aliased <code>public.getallmarkermetadatabydatasetandmap</code> table reference
     */
    public Getallmarkermetadatabydatasetandmap(Name alias) {
        this(alias, GETALLMARKERMETADATABYDATASETANDMAP);
    }

    private Getallmarkermetadatabydatasetandmap(Name alias, Table<GetallmarkermetadatabydatasetandmapRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private Getallmarkermetadatabydatasetandmap(Name alias, Table<GetallmarkermetadatabydatasetandmapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getallmarkermetadatabydatasetandmap as(String alias) {
        return new Getallmarkermetadatabydatasetandmap(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getallmarkermetadatabydatasetandmap as(Name alias) {
        return new Getallmarkermetadatabydatasetandmap(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallmarkermetadatabydatasetandmap rename(String name) {
        return new Getallmarkermetadatabydatasetandmap(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallmarkermetadatabydatasetandmap rename(Name name) {
        return new Getallmarkermetadatabydatasetandmap(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getallmarkermetadatabydatasetandmap call(Integer datasetid, Integer mapid) {
        return new Getallmarkermetadatabydatasetandmap(DSL.name(getName()), null, new Field[] { 
              DSL.val(datasetid, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(mapid, org.jooq.impl.SQLDataType.INTEGER)
        });
    }

    /**
     * Call this table-valued function
     */
    public Getallmarkermetadatabydatasetandmap call(Field<Integer> datasetid, Field<Integer> mapid) {
        return new Getallmarkermetadatabydatasetandmap(DSL.name(getName()), null, new Field[] { 
              datasetid
            , mapid
        });
    }
}
