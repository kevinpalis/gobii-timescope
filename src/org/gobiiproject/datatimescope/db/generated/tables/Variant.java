/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.VariantRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Variant extends TableImpl<VariantRecord> {

    private static final long serialVersionUID = 1542853734;

    /**
     * The reference instance of <code>public.variant</code>
     */
    public static final Variant VARIANT = new Variant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariantRecord> getRecordType() {
        return VariantRecord.class;
    }

    /**
     * The column <code>public.variant.variant_id</code>.
     */
    public final TableField<VariantRecord, Integer> VARIANT_ID = createField("variant_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('variant_variant_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.variant.code</code>.
     */
    public final TableField<VariantRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.variant.created_by</code>.
     */
    public final TableField<VariantRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.variant.created_date</code>.
     */
    public final TableField<VariantRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>public.variant.modified_by</code>.
     */
    public final TableField<VariantRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.variant.modified_date</code>.
     */
    public final TableField<VariantRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>public.variant</code> table reference
     */
    public Variant() {
        this(DSL.name("variant"), null);
    }

    /**
     * Create an aliased <code>public.variant</code> table reference
     */
    public Variant(String alias) {
        this(DSL.name(alias), VARIANT);
    }

    /**
     * Create an aliased <code>public.variant</code> table reference
     */
    public Variant(Name alias) {
        this(alias, VARIANT);
    }

    private Variant(Name alias, Table<VariantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Variant(Name alias, Table<VariantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_VARIANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VariantRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VARIANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VariantRecord> getPrimaryKey() {
        return Keys.PK_VARIANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VariantRecord>> getKeys() {
        return Arrays.<UniqueKey<VariantRecord>>asList(Keys.PK_VARIANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Variant as(String alias) {
        return new Variant(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Variant as(Name alias) {
        return new Variant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Variant rename(String name) {
        return new Variant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Variant rename(Name name) {
        return new Variant(name, null);
    }
}
