/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.DisplayRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Display extends TableImpl<DisplayRecord> {

    private static final long serialVersionUID = 756528333;

    /**
     * The reference instance of <code>public.display</code>
     */
    public static final Display DISPLAY = new Display();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisplayRecord> getRecordType() {
        return DisplayRecord.class;
    }

    /**
     * The column <code>public.display.display_id</code>.
     */
    public final TableField<DisplayRecord, Integer> DISPLAY_ID = createField("display_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('display_display_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.display.table_name</code>.
     */
    public final TableField<DisplayRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.display.column_name</code>.
     */
    public final TableField<DisplayRecord, String> COLUMN_NAME = createField("column_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.display.display_name</code>.
     */
    public final TableField<DisplayRecord, String> DISPLAY_NAME = createField("display_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.display.created_by</code>.
     */
    public final TableField<DisplayRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.display.created_date</code>.
     */
    public final TableField<DisplayRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>public.display.modified_by</code>.
     */
    public final TableField<DisplayRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.display.modified_date</code>.
     */
    public final TableField<DisplayRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>public.display.rank</code>.
     */
    public final TableField<DisplayRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.display</code> table reference
     */
    public Display() {
        this(DSL.name("display"), null);
    }

    /**
     * Create an aliased <code>public.display</code> table reference
     */
    public Display(String alias) {
        this(DSL.name(alias), DISPLAY);
    }

    /**
     * Create an aliased <code>public.display</code> table reference
     */
    public Display(Name alias) {
        this(alias, DISPLAY);
    }

    private Display(Name alias, Table<DisplayRecord> aliased) {
        this(alias, aliased, null);
    }

    private Display(Name alias, Table<DisplayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_TABLE_DISPLAY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DisplayRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DISPLAY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DisplayRecord> getPrimaryKey() {
        return Keys.PK_TABLE_DISPLAY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DisplayRecord>> getKeys() {
        return Arrays.<UniqueKey<DisplayRecord>>asList(Keys.PK_TABLE_DISPLAY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Display as(String alias) {
        return new Display(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Display as(Name alias) {
        return new Display(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Display rename(String name) {
        return new Display(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Display rename(Name name) {
        return new Display(name, null);
    }
}
