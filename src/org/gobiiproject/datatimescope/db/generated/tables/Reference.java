/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.ReferenceRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reference extends TableImpl<ReferenceRecord> {

    private static final long serialVersionUID = 1378382420;

    /**
     * The reference instance of <code>public.reference</code>
     */
    public static final Reference REFERENCE = new Reference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReferenceRecord> getRecordType() {
        return ReferenceRecord.class;
    }

    /**
     * The column <code>public.reference.reference_id</code>.
     */
    public final TableField<ReferenceRecord, Integer> REFERENCE_ID = createField("reference_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('reference_reference_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.reference.name</code>.
     */
    public final TableField<ReferenceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.reference.version</code>.
     */
    public final TableField<ReferenceRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.reference.link</code>.
     */
    public final TableField<ReferenceRecord, String> LINK = createField("link", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.reference.file_path</code>.
     */
    public final TableField<ReferenceRecord, String> FILE_PATH = createField("file_path", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.reference.created_by</code>.
     */
    public final TableField<ReferenceRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.reference.created_date</code>.
     */
    public final TableField<ReferenceRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.reference.modified_by</code>.
     */
    public final TableField<ReferenceRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.reference.modified_date</code>.
     */
    public final TableField<ReferenceRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * Create a <code>public.reference</code> table reference
     */
    public Reference() {
        this(DSL.name("reference"), null);
    }

    /**
     * Create an aliased <code>public.reference</code> table reference
     */
    public Reference(String alias) {
        this(DSL.name(alias), REFERENCE);
    }

    /**
     * Create an aliased <code>public.reference</code> table reference
     */
    public Reference(Name alias) {
        this(alias, REFERENCE);
    }

    private Reference(Name alias, Table<ReferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reference(Name alias, Table<ReferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_REFERENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ReferenceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REFERENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReferenceRecord> getPrimaryKey() {
        return Keys.PK_REFERENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReferenceRecord>> getKeys() {
        return Arrays.<UniqueKey<ReferenceRecord>>asList(Keys.PK_REFERENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Reference as(String alias) {
        return new Reference(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Reference as(Name alias) {
        return new Reference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reference rename(String name) {
        return new Reference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reference rename(Name name) {
        return new Reference(name, null);
    }
}
