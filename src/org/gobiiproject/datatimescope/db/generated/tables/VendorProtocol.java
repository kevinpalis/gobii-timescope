/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.VendorProtocolRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Vendors reside in the Organization table. A vendor can provide multiple 
 * protocols, and a particular protocol can be offered by multiple vendors, 
 * hence the N:M relationship table.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VendorProtocol extends TableImpl<VendorProtocolRecord> {

    private static final long serialVersionUID = 888881528;

    /**
     * The reference instance of <code>public.vendor_protocol</code>
     */
    public static final VendorProtocol VENDOR_PROTOCOL = new VendorProtocol();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VendorProtocolRecord> getRecordType() {
        return VendorProtocolRecord.class;
    }

    /**
     * The column <code>public.vendor_protocol.vendor_protocol_id</code>.
     */
    public final TableField<VendorProtocolRecord, Integer> VENDOR_PROTOCOL_ID = createField("vendor_protocol_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vendor_protocol_vendor_protocol_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.vendor_protocol.name</code>. This is optional.
     */
    public final TableField<VendorProtocolRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "This is optional.");

    /**
     * The column <code>public.vendor_protocol.vendor_id</code>.
     */
    public final TableField<VendorProtocolRecord, Integer> VENDOR_ID = createField("vendor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vendor_protocol.protocol_id</code>.
     */
    public final TableField<VendorProtocolRecord, Integer> PROTOCOL_ID = createField("protocol_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vendor_protocol.status</code>.
     */
    public final TableField<VendorProtocolRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.vendor_protocol</code> table reference
     */
    public VendorProtocol() {
        this(DSL.name("vendor_protocol"), null);
    }

    /**
     * Create an aliased <code>public.vendor_protocol</code> table reference
     */
    public VendorProtocol(String alias) {
        this(DSL.name(alias), VENDOR_PROTOCOL);
    }

    /**
     * Create an aliased <code>public.vendor_protocol</code> table reference
     */
    public VendorProtocol(Name alias) {
        this(alias, VENDOR_PROTOCOL);
    }

    private VendorProtocol(Name alias, Table<VendorProtocolRecord> aliased) {
        this(alias, aliased, null);
    }

    private VendorProtocol(Name alias, Table<VendorProtocolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Vendors reside in the Organization table. A vendor can provide multiple protocols, and a particular protocol can be offered by multiple vendors, hence the N:M relationship table.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_VENDOR_PROTOCOL_PROTOCOL_ID, Indexes.IDX_VENDOR_PROTOCOL_VENDOR_ID, Indexes.PK_VENDOR_PROTOCOL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VendorProtocolRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VENDOR_PROTOCOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VendorProtocolRecord> getPrimaryKey() {
        return Keys.PK_VENDOR_PROTOCOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VendorProtocolRecord>> getKeys() {
        return Arrays.<UniqueKey<VendorProtocolRecord>>asList(Keys.PK_VENDOR_PROTOCOL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VendorProtocolRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VendorProtocolRecord, ?>>asList(Keys.VENDOR_PROTOCOL__VENDOR_PROTOCOL_VENDOR_ID_FKEY, Keys.VENDOR_PROTOCOL__VENDOR_PROTOCOL_PROTOCOL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VendorProtocol as(String alias) {
        return new VendorProtocol(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VendorProtocol as(Name alias) {
        return new VendorProtocol(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VendorProtocol rename(String name) {
        return new VendorProtocol(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VendorProtocol rename(Name name) {
        return new VendorProtocol(name, null);
    }
}
