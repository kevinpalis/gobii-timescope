/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GetminimalsamplemetadatabydatasetRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getminimalsamplemetadatabydataset extends TableImpl<GetminimalsamplemetadatabydatasetRecord> {

    private static final long serialVersionUID = -1743628951;

    /**
     * The reference instance of <code>public.getminimalsamplemetadatabydataset</code>
     */
    public static final Getminimalsamplemetadatabydataset GETMINIMALSAMPLEMETADATABYDATASET = new Getminimalsamplemetadatabydataset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetminimalsamplemetadatabydatasetRecord> getRecordType() {
        return GetminimalsamplemetadatabydatasetRecord.class;
    }

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.dnarun_name</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> DNARUN_NAME = createField("dnarun_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.sample_name</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> SAMPLE_NAME = createField("sample_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.germplasm_name</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> GERMPLASM_NAME = createField("germplasm_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.external_code</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> EXTERNAL_CODE = createField("external_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.germplasm_type</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> GERMPLASM_TYPE = createField("germplasm_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.species</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> SPECIES = createField("species", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.platename</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> PLATENAME = createField("platename", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.num</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> NUM = createField("num", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.well_row</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> WELL_ROW = createField("well_row", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalsamplemetadatabydataset.well_col</code>.
     */
    public final TableField<GetminimalsamplemetadatabydatasetRecord, String> WELL_COL = createField("well_col", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.getminimalsamplemetadatabydataset</code> table reference
     */
    public Getminimalsamplemetadatabydataset() {
        this(DSL.name("getminimalsamplemetadatabydataset"), null);
    }

    /**
     * Create an aliased <code>public.getminimalsamplemetadatabydataset</code> table reference
     */
    public Getminimalsamplemetadatabydataset(String alias) {
        this(DSL.name(alias), GETMINIMALSAMPLEMETADATABYDATASET);
    }

    /**
     * Create an aliased <code>public.getminimalsamplemetadatabydataset</code> table reference
     */
    public Getminimalsamplemetadatabydataset(Name alias) {
        this(alias, GETMINIMALSAMPLEMETADATABYDATASET);
    }

    private Getminimalsamplemetadatabydataset(Name alias, Table<GetminimalsamplemetadatabydatasetRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private Getminimalsamplemetadatabydataset(Name alias, Table<GetminimalsamplemetadatabydatasetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getminimalsamplemetadatabydataset as(String alias) {
        return new Getminimalsamplemetadatabydataset(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getminimalsamplemetadatabydataset as(Name alias) {
        return new Getminimalsamplemetadatabydataset(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getminimalsamplemetadatabydataset rename(String name) {
        return new Getminimalsamplemetadatabydataset(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getminimalsamplemetadatabydataset rename(Name name) {
        return new Getminimalsamplemetadatabydataset(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getminimalsamplemetadatabydataset call(Integer datasetid) {
        return new Getminimalsamplemetadatabydataset(DSL.name(getName()), null, new Field[] { 
              DSL.val(datasetid, org.jooq.impl.SQLDataType.INTEGER)
        });
    }

    /**
     * Call this table-valued function
     */
    public Getminimalsamplemetadatabydataset call(Field<Integer> datasetid) {
        return new Getminimalsamplemetadatabydataset(DSL.name(getName()), null, new Field[] { 
              datasetid
        });
    }
}
