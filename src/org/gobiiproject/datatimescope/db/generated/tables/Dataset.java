/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.DatasetRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dataset extends TableImpl<DatasetRecord> {

    private static final long serialVersionUID = -1754899888;

    /**
     * The reference instance of <code>public.dataset</code>
     */
    public static final Dataset DATASET = new Dataset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetRecord> getRecordType() {
        return DatasetRecord.class;
    }

    /**
     * The column <code>public.dataset.dataset_id</code>.
     */
    public final TableField<DatasetRecord, Integer> DATASET_ID = createField("dataset_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dataset_dataset_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dataset.experiment_id</code>.
     */
    public final TableField<DatasetRecord, Integer> EXPERIMENT_ID = createField("experiment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dataset.callinganalysis_id</code>.
     */
    public final TableField<DatasetRecord, Integer> CALLINGANALYSIS_ID = createField("callinganalysis_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dataset.analyses</code>.
     */
    public final TableField<DatasetRecord, Integer[]> ANALYSES = createField("analyses", org.jooq.impl.SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * The column <code>public.dataset.data_table</code>.
     */
    public final TableField<DatasetRecord, String> DATA_TABLE = createField("data_table", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.data_file</code>.
     */
    public final TableField<DatasetRecord, String> DATA_FILE = createField("data_file", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.quality_table</code>.
     */
    public final TableField<DatasetRecord, String> QUALITY_TABLE = createField("quality_table", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.quality_file</code>.
     */
    public final TableField<DatasetRecord, String> QUALITY_FILE = createField("quality_file", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DatasetRecord, Object> SCORES = createField("scores", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * The column <code>public.dataset.created_by</code>.
     */
    public final TableField<DatasetRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dataset.created_date</code>.
     */
    public final TableField<DatasetRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.dataset.modified_by</code>.
     */
    public final TableField<DatasetRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dataset.modified_date</code>.
     */
    public final TableField<DatasetRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.dataset.status</code>.
     */
    public final TableField<DatasetRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dataset.type_id</code>.
     */
    public final TableField<DatasetRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dataset.name</code>.
     */
    public final TableField<DatasetRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataset.job_id</code>.
     */
    public final TableField<DatasetRecord, Integer> JOB_ID = createField("job_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.dataset</code> table reference
     */
    public Dataset() {
        this(DSL.name("dataset"), null);
    }

    /**
     * Create an aliased <code>public.dataset</code> table reference
     */
    public Dataset(String alias) {
        this(DSL.name(alias), DATASET);
    }

    /**
     * Create an aliased <code>public.dataset</code> table reference
     */
    public Dataset(Name alias) {
        this(alias, DATASET);
    }

    private Dataset(Name alias, Table<DatasetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dataset(Name alias, Table<DatasetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_DATASET_EXPERIMENT_ID, Indexes.PK_DATASET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DatasetRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DATASET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DatasetRecord> getPrimaryKey() {
        return Keys.PK_DATASET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DatasetRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetRecord>>asList(Keys.PK_DATASET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DatasetRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DatasetRecord, ?>>asList(Keys.DATASET__DATASET_EXPERIMENT_ID_FKEY, Keys.DATASET__DATASET_CALLINGANALYSIS_ID_FKEY, Keys.DATASET__DATASET_JOB_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dataset as(String alias) {
        return new Dataset(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dataset as(Name alias) {
        return new Dataset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataset rename(String name) {
        return new Dataset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataset rename(Name name) {
        return new Dataset(name, null);
    }
}
