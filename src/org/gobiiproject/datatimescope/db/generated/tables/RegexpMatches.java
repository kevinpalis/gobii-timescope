/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.RegexpMatchesRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegexpMatches extends TableImpl<RegexpMatchesRecord> {

    private static final long serialVersionUID = 727934986;

    /**
     * The reference instance of <code>public.regexp_matches</code>
     */
    public static final RegexpMatches REGEXP_MATCHES = new RegexpMatches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegexpMatchesRecord> getRecordType() {
        return RegexpMatchesRecord.class;
    }

    /**
     * The column <code>public.regexp_matches.regexp_matches</code>.
     */
    public final TableField<RegexpMatchesRecord, String[]> REGEXP_MATCHES_ = createField("regexp_matches", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>public.regexp_matches</code> table reference
     */
    public RegexpMatches() {
        this(DSL.name("regexp_matches"), null);
    }

    /**
     * Create an aliased <code>public.regexp_matches</code> table reference
     */
    public RegexpMatches(String alias) {
        this(DSL.name(alias), REGEXP_MATCHES);
    }

    /**
     * Create an aliased <code>public.regexp_matches</code> table reference
     */
    public RegexpMatches(Name alias) {
        this(alias, REGEXP_MATCHES);
    }

    private RegexpMatches(Name alias, Table<RegexpMatchesRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private RegexpMatches(Name alias, Table<RegexpMatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegexpMatches as(String alias) {
        return new RegexpMatches(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegexpMatches as(Name alias) {
        return new RegexpMatches(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public RegexpMatches rename(String name) {
        return new RegexpMatches(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public RegexpMatches rename(Name name) {
        return new RegexpMatches(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public RegexpMatches call(Object __1, Object __2) {
        return new RegexpMatches(DSL.name(getName()), null, new Field[] { 
              DSL.val(__1, org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"))
            , DSL.val(__2, org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"))
        });
    }

    /**
     * Call this table-valued function
     */
    public RegexpMatches call(Field<Object> __1, Field<Object> __2) {
        return new RegexpMatches(DSL.name(getName()), null, new Field[] { 
              __1
            , __2
        });
    }
}
