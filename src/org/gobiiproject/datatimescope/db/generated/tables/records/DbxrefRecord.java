/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables.records;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.tables.Dbxref;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * A unique, global, public, stable identifier. Not necessarily an external 
 * reference - can reference data items inside the particular instance being 
 * used. Typically a row in a table can be uniquely identified with a primary 
 * identifier (called dbxref_id); a table may also have secondary identifiers 
 * (in a linking table &lt;T&gt;_dbxref). A dbxref is generally written as 
 * &lt;DB&gt;:&lt;ACCESSION&gt; or as &lt;DB&gt;:&lt;ACCESSION&gt;:&lt;VERSION&gt;.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbxrefRecord extends UpdatableRecordImpl<DbxrefRecord> implements Record7<Integer, String, String, String, String, String, Object> {

    private static final long serialVersionUID = -1747620590;

    /**
     * Setter for <code>public.dbxref.dbxref_id</code>.
     */
    public void setDbxrefId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.dbxref.dbxref_id</code>.
     */
    public Integer getDbxrefId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.dbxref.accession</code>. The local part of the identifier. Guaranteed by the db authority to be unique for that db.
     */
    public void setAccession(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.dbxref.accession</code>. The local part of the identifier. Guaranteed by the db authority to be unique for that db.
     */
    public String getAccession() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.dbxref.ver</code>.
     */
    public void setVer(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.dbxref.ver</code>.
     */
    public String getVer() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.dbxref.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.dbxref.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.dbxref.db_name</code>. source name, ex. EDAM Ontology
A database authority. Typical databases in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this shortened form, which is unique within the
bioinformatics and biomedical realm. 
     */
    public void setDbName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.dbxref.db_name</code>. source name, ex. EDAM Ontology
A database authority. Typical databases in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this shortened form, which is unique within the
bioinformatics and biomedical realm. 
     */
    public String getDbName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.dbxref.url</code>.
     */
    public void setUrl(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.dbxref.url</code>.
     */
    public String getUrl() {
        return (String) get(5);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public void setProps(Object value) {
        set(6, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public Object getProps() {
        return get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, String, String, String, String, String, Object> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, String, String, String, String, String, Object> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Dbxref.DBXREF.DBXREF_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Dbxref.DBXREF.ACCESSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Dbxref.DBXREF.VER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Dbxref.DBXREF.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Dbxref.DBXREF.DB_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Dbxref.DBXREF.URL;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field7() {
        return Dbxref.DBXREF.PROPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getDbxrefId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getAccession();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getVer();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getDbName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getUrl();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component7() {
        return getProps();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getDbxrefId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAccession();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getVer();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getDbName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getUrl();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value7() {
        return getProps();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord value1(Integer value) {
        setDbxrefId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord value2(String value) {
        setAccession(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord value3(String value) {
        setVer(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord value4(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord value5(String value) {
        setDbName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord value6(String value) {
        setUrl(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public DbxrefRecord value7(Object value) {
        setProps(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DbxrefRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6, Object value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbxrefRecord
     */
    public DbxrefRecord() {
        super(Dbxref.DBXREF);
    }

    /**
     * Create a detached, initialised DbxrefRecord
     */
    public DbxrefRecord(Integer dbxrefId, String accession, String ver, String description, String dbName, String url, Object props) {
        super(Dbxref.DBXREF);

        set(0, dbxrefId);
        set(1, accession);
        set(2, ver);
        set(3, description);
        set(4, dbName);
        set(5, url);
        set(6, props);
    }
}
