/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables.records;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.tables.Getmarkerinmarkergroupbyname;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetmarkerinmarkergroupbynameRecord extends TableRecordImpl<GetmarkerinmarkergroupbynameRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1248050870;

    /**
     * Setter for <code>public.getmarkerinmarkergroupbyname.marker_id</code>.
     */
    public void setMarkerId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.getmarkerinmarkergroupbyname.marker_id</code>.
     */
    public Integer getMarkerId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.getmarkerinmarkergroupbyname.favorable_allele</code>.
     */
    public void setFavorableAllele(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.getmarkerinmarkergroupbyname.favorable_allele</code>.
     */
    public String getFavorableAllele() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Getmarkerinmarkergroupbyname.GETMARKERINMARKERGROUPBYNAME.MARKER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Getmarkerinmarkergroupbyname.GETMARKERINMARKERGROUPBYNAME.FAVORABLE_ALLELE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getMarkerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getFavorableAllele();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getMarkerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getFavorableAllele();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetmarkerinmarkergroupbynameRecord value1(Integer value) {
        setMarkerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetmarkerinmarkergroupbynameRecord value2(String value) {
        setFavorableAllele(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetmarkerinmarkergroupbynameRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GetmarkerinmarkergroupbynameRecord
     */
    public GetmarkerinmarkergroupbynameRecord() {
        super(Getmarkerinmarkergroupbyname.GETMARKERINMARKERGROUPBYNAME);
    }

    /**
     * Create a detached, initialised GetmarkerinmarkergroupbynameRecord
     */
    public GetmarkerinmarkergroupbynameRecord(Integer markerId, String favorableAllele) {
        super(Getmarkerinmarkergroupbyname.GETMARKERINMARKERGROUPBYNAME);

        set(0, markerId);
        set(1, favorableAllele);
    }
}
