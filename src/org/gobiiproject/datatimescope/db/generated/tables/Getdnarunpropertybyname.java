/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GetdnarunpropertybynameRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getdnarunpropertybyname extends TableImpl<GetdnarunpropertybynameRecord> {

    private static final long serialVersionUID = 1887540316;

    /**
     * The reference instance of <code>public.getdnarunpropertybyname</code>
     */
    public static final Getdnarunpropertybyname GETDNARUNPROPERTYBYNAME = new Getdnarunpropertybyname();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetdnarunpropertybynameRecord> getRecordType() {
        return GetdnarunpropertybynameRecord.class;
    }

    /**
     * The column <code>public.getdnarunpropertybyname.property_id</code>.
     */
    public final TableField<GetdnarunpropertybynameRecord, Integer> PROPERTY_ID = createField("property_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.getdnarunpropertybyname.property_value</code>.
     */
    public final TableField<GetdnarunpropertybynameRecord, String> PROPERTY_VALUE = createField("property_value", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.getdnarunpropertybyname</code> table reference
     */
    public Getdnarunpropertybyname() {
        this(DSL.name("getdnarunpropertybyname"), null);
    }

    /**
     * Create an aliased <code>public.getdnarunpropertybyname</code> table reference
     */
    public Getdnarunpropertybyname(String alias) {
        this(DSL.name(alias), GETDNARUNPROPERTYBYNAME);
    }

    /**
     * Create an aliased <code>public.getdnarunpropertybyname</code> table reference
     */
    public Getdnarunpropertybyname(Name alias) {
        this(alias, GETDNARUNPROPERTYBYNAME);
    }

    private Getdnarunpropertybyname(Name alias, Table<GetdnarunpropertybynameRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private Getdnarunpropertybyname(Name alias, Table<GetdnarunpropertybynameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getdnarunpropertybyname as(String alias) {
        return new Getdnarunpropertybyname(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getdnarunpropertybyname as(Name alias) {
        return new Getdnarunpropertybyname(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getdnarunpropertybyname rename(String name) {
        return new Getdnarunpropertybyname(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getdnarunpropertybyname rename(Name name) {
        return new Getdnarunpropertybyname(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getdnarunpropertybyname call(Integer id, String propertyname) {
        return new Getdnarunpropertybyname(DSL.name(getName()), null, new Field[] { 
              DSL.val(id, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(propertyname, org.jooq.impl.SQLDataType.CLOB)
        });
    }

    /**
     * Call this table-valued function
     */
    public Getdnarunpropertybyname call(Field<Integer> id, Field<String> propertyname) {
        return new Getdnarunpropertybyname(DSL.name(getName()), null, new Field[] { 
              id
            , propertyname
        });
    }
}
