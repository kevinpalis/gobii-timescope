/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.VertexRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vertex extends TableImpl<VertexRecord> {

    private static final long serialVersionUID = 537409864;

    /**
     * The reference instance of <code>public.vertex</code>
     */
    public static final Vertex VERTEX = new Vertex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VertexRecord> getRecordType() {
        return VertexRecord.class;
    }

    /**
     * The column <code>public.vertex.vertex_id</code>.
     */
    public final TableField<VertexRecord, Integer> VERTEX_ID = createField("vertex_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vertex_vertex_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.vertex.name</code>.
     */
    public final TableField<VertexRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vertex.type_id</code>.
     */
    public final TableField<VertexRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vertex.table_name</code>.
     */
    public final TableField<VertexRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vertex.data_loc</code>.
     */
    public final TableField<VertexRecord, String> DATA_LOC = createField("data_loc", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vertex.criterion</code>.
     */
    public final TableField<VertexRecord, String> CRITERION = createField("criterion", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vertex.alias</code>.
     */
    public final TableField<VertexRecord, String> ALIAS = createField("alias", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vertex.relevance</code>.
     */
    public final TableField<VertexRecord, Integer> RELEVANCE = createField("relevance", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.vertex.is_entry</code>.
     */
    public final TableField<VertexRecord, Boolean> IS_ENTRY = createField("is_entry", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.vertex</code> table reference
     */
    public Vertex() {
        this(DSL.name("vertex"), null);
    }

    /**
     * Create an aliased <code>public.vertex</code> table reference
     */
    public Vertex(String alias) {
        this(DSL.name(alias), VERTEX);
    }

    /**
     * Create an aliased <code>public.vertex</code> table reference
     */
    public Vertex(Name alias) {
        this(alias, VERTEX);
    }

    private Vertex(Name alias, Table<VertexRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vertex(Name alias, Table<VertexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTRY_VERTEX_IDX, Indexes.TYPEOF_VERTEX_IDX, Indexes.VERTEX_NAME_IDX, Indexes.VERTEX_NAME_KEY, Indexes.VERTEX_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VertexRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VERTEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VertexRecord> getPrimaryKey() {
        return Keys.VERTEX_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VertexRecord>> getKeys() {
        return Arrays.<UniqueKey<VertexRecord>>asList(Keys.VERTEX_PKEY, Keys.VERTEX_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VertexRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VertexRecord, ?>>asList(Keys.VERTEX__VERTEX_TYPE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vertex as(String alias) {
        return new Vertex(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vertex as(Name alias) {
        return new Vertex(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vertex rename(String name) {
        return new Vertex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vertex rename(Name name) {
        return new Vertex(name, null);
    }
}
