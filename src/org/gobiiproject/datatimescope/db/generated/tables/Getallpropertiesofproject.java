/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GetallpropertiesofprojectRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getallpropertiesofproject extends TableImpl<GetallpropertiesofprojectRecord> {

    private static final long serialVersionUID = -776877208;

    /**
     * The reference instance of <code>public.getallpropertiesofproject</code>
     */
    public static final Getallpropertiesofproject GETALLPROPERTIESOFPROJECT = new Getallpropertiesofproject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetallpropertiesofprojectRecord> getRecordType() {
        return GetallpropertiesofprojectRecord.class;
    }

    /**
     * The column <code>public.getallpropertiesofproject.property_id</code>.
     */
    public final TableField<GetallpropertiesofprojectRecord, Integer> PROPERTY_ID = createField("property_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.getallpropertiesofproject.property_name</code>.
     */
    public final TableField<GetallpropertiesofprojectRecord, String> PROPERTY_NAME = createField("property_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getallpropertiesofproject.property_value</code>.
     */
    public final TableField<GetallpropertiesofprojectRecord, String> PROPERTY_VALUE = createField("property_value", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.getallpropertiesofproject</code> table reference
     */
    public Getallpropertiesofproject() {
        this(DSL.name("getallpropertiesofproject"), null);
    }

    /**
     * Create an aliased <code>public.getallpropertiesofproject</code> table reference
     */
    public Getallpropertiesofproject(String alias) {
        this(DSL.name(alias), GETALLPROPERTIESOFPROJECT);
    }

    /**
     * Create an aliased <code>public.getallpropertiesofproject</code> table reference
     */
    public Getallpropertiesofproject(Name alias) {
        this(alias, GETALLPROPERTIESOFPROJECT);
    }

    private Getallpropertiesofproject(Name alias, Table<GetallpropertiesofprojectRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private Getallpropertiesofproject(Name alias, Table<GetallpropertiesofprojectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getallpropertiesofproject as(String alias) {
        return new Getallpropertiesofproject(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getallpropertiesofproject as(Name alias) {
        return new Getallpropertiesofproject(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallpropertiesofproject rename(String name) {
        return new Getallpropertiesofproject(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getallpropertiesofproject rename(Name name) {
        return new Getallpropertiesofproject(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getallpropertiesofproject call(Integer projectid) {
        return new Getallpropertiesofproject(DSL.name(getName()), null, new Field[] { 
              DSL.val(projectid, org.jooq.impl.SQLDataType.INTEGER)
        });
    }

    /**
     * Call this table-valued function
     */
    public Getallpropertiesofproject call(Field<Integer> projectid) {
        return new Getallpropertiesofproject(DSL.name(getName()), null, new Field[] { 
              projectid
        });
    }
}
