/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.DnasampleRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dnasample extends TableImpl<DnasampleRecord> {

    private static final long serialVersionUID = 1825976245;

    /**
     * The reference instance of <code>public.dnasample</code>
     */
    public static final Dnasample DNASAMPLE = new Dnasample();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DnasampleRecord> getRecordType() {
        return DnasampleRecord.class;
    }

    /**
     * The column <code>public.dnasample.dnasample_id</code>.
     */
    public final TableField<DnasampleRecord, Integer> DNASAMPLE_ID = createField("dnasample_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dnasample_dnasample_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dnasample.name</code>.
     */
    public final TableField<DnasampleRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dnasample.code</code>.
     */
    public final TableField<DnasampleRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dnasample.platename</code>.
     */
    public final TableField<DnasampleRecord, String> PLATENAME = createField("platename", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dnasample.num</code>.
     */
    public final TableField<DnasampleRecord, String> NUM = createField("num", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dnasample.well_row</code>.
     */
    public final TableField<DnasampleRecord, String> WELL_ROW = createField("well_row", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dnasample.well_col</code>.
     */
    public final TableField<DnasampleRecord, String> WELL_COL = createField("well_col", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dnasample.project_id</code>.
     */
    public final TableField<DnasampleRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dnasample.germplasm_id</code>.
     */
    public final TableField<DnasampleRecord, Integer> GERMPLASM_ID = createField("germplasm_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dnasample.created_by</code>.
     */
    public final TableField<DnasampleRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dnasample.created_date</code>.
     */
    public final TableField<DnasampleRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.dnasample.modified_by</code>.
     */
    public final TableField<DnasampleRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dnasample.modified_date</code>.
     */
    public final TableField<DnasampleRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.dnasample.status</code>.
     */
    public final TableField<DnasampleRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DnasampleRecord, Object> PROPS = createField("props", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * Create a <code>public.dnasample</code> table reference
     */
    public Dnasample() {
        this(DSL.name("dnasample"), null);
    }

    /**
     * Create an aliased <code>public.dnasample</code> table reference
     */
    public Dnasample(String alias) {
        this(DSL.name(alias), DNASAMPLE);
    }

    /**
     * Create an aliased <code>public.dnasample</code> table reference
     */
    public Dnasample(Name alias) {
        this(alias, DNASAMPLE);
    }

    private Dnasample(Name alias, Table<DnasampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dnasample(Name alias, Table<DnasampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_DNASAMPLE_NAME, Indexes.IDX_DNASAMPLE_NUM, Indexes.IDX_DNASAMPLE_PLATENAME, Indexes.IDX_DNASAMPLE_PROPS, Indexes.IDX_DNASAMPLE_WELLROW_WELLCOL, Indexes.PK_DNASAMPLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DnasampleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DNASAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DnasampleRecord> getPrimaryKey() {
        return Keys.PK_DNASAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DnasampleRecord>> getKeys() {
        return Arrays.<UniqueKey<DnasampleRecord>>asList(Keys.PK_DNASAMPLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DnasampleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DnasampleRecord, ?>>asList(Keys.DNASAMPLE__DNASAMPLE_PROJECT_ID_FKEY, Keys.DNASAMPLE__DNASAMPLE_GERMPLASM_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dnasample as(String alias) {
        return new Dnasample(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dnasample as(Name alias) {
        return new Dnasample(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dnasample rename(String name) {
        return new Dnasample(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dnasample rename(Name name) {
        return new Dnasample(name, null);
    }
}
