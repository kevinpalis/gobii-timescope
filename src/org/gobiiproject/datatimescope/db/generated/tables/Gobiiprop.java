/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GobiipropRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This table is different from other prop tables/columns in the database, 
 * as it is for storing information about the database itself, like schema 
 * version
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gobiiprop extends TableImpl<GobiipropRecord> {

    private static final long serialVersionUID = 339461280;

    /**
     * The reference instance of <code>public.gobiiprop</code>
     */
    public static final Gobiiprop GOBIIPROP = new Gobiiprop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GobiipropRecord> getRecordType() {
        return GobiipropRecord.class;
    }

    /**
     * The column <code>public.gobiiprop.gobiiprop_id</code>.
     */
    public final TableField<GobiipropRecord, Integer> GOBIIPROP_ID = createField("gobiiprop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('gobiiprop_gobiiprop_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.gobiiprop.type_id</code>. The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.
     */
    public final TableField<GobiipropRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.");

    /**
     * The column <code>public.gobiiprop.value</code>. The value of the property, represented as text. Numeric values are converted to their text representation.
     */
    public final TableField<GobiipropRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB, this, "The value of the property, represented as text. Numeric values are converted to their text representation.");

    /**
     * The column <code>public.gobiiprop.rank</code>. Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.
     */
    public final TableField<GobiipropRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Property-Value ordering. Any\ncv can have multiple values for any particular property type -\nthese are ordered in a list using rank, counting from zero. For\nproperties that are single-valued rather than multi-valued, the\ndefault 0 value should be used.");

    /**
     * Create a <code>public.gobiiprop</code> table reference
     */
    public Gobiiprop() {
        this(DSL.name("gobiiprop"), null);
    }

    /**
     * Create an aliased <code>public.gobiiprop</code> table reference
     */
    public Gobiiprop(String alias) {
        this(DSL.name(alias), GOBIIPROP);
    }

    /**
     * Create an aliased <code>public.gobiiprop</code> table reference
     */
    public Gobiiprop(Name alias) {
        this(alias, GOBIIPROP);
    }

    private Gobiiprop(Name alias, Table<GobiipropRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gobiiprop(Name alias, Table<GobiipropRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "This table is different from other prop tables/columns in the database, as it is for storing information about the database itself, like schema version");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GOBIIPROP_C1, Indexes.GOBIIPROP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GobiipropRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GOBIIPROP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GobiipropRecord> getPrimaryKey() {
        return Keys.GOBIIPROP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GobiipropRecord>> getKeys() {
        return Arrays.<UniqueKey<GobiipropRecord>>asList(Keys.GOBIIPROP_PKEY, Keys.GOBIIPROP_C1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Gobiiprop as(String alias) {
        return new Gobiiprop(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Gobiiprop as(Name alias) {
        return new Gobiiprop(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gobiiprop rename(String name) {
        return new Gobiiprop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gobiiprop rename(Name name) {
        return new Gobiiprop(name, null);
    }
}
