/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.CvRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A term, class, universal or type within an
 * ontology or controlled vocabulary.  This table is also used for
 * relations and properties. cvterms constitute nodes in the graph
 * defined by the collection of cvterms and cvterm_relationships.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cv extends TableImpl<CvRecord> {

    private static final long serialVersionUID = -1601894053;

    /**
     * The reference instance of <code>public.cv</code>
     */
    public static final Cv CV = new Cv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CvRecord> getRecordType() {
        return CvRecord.class;
    }

    /**
     * The column <code>public.cv.cv_id</code>.
     */
    public final TableField<CvRecord, Integer> CV_ID = createField("cv_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cv_cv_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cv.term</code>. A concise human-readable name or
label for the cvterm. Uniquely identifies a cvterm within a cv.
     */
    public final TableField<CvRecord, String> TERM = createField("term", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "A concise human-readable name or\nlabel for the cvterm. Uniquely identifies a cvterm within a cv.");

    /**
     * The column <code>public.cv.definition</code>. A human-readable text
definition.
     */
    public final TableField<CvRecord, String> DEFINITION = createField("definition", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "A human-readable text\ndefinition.");

    /**
     * The column <code>public.cv.rank</code>.
     */
    public final TableField<CvRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cv.cvgroup_id</code>. The cv or ontology or namespace to which
this cvterm belongs.
     */
    public final TableField<CvRecord, Integer> CVGROUP_ID = createField("cvgroup_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The cv or ontology or namespace to which\nthis cvterm belongs.");

    /**
     * The column <code>public.cv.abbreviation</code>.
     */
    public final TableField<CvRecord, String> ABBREVIATION = createField("abbreviation", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.cv.dbxref_id</code>. Primary identifier dbxref - The
unique global OBO identifier for this cvterm.  
     */
    public final TableField<CvRecord, Integer> DBXREF_ID = createField("dbxref_id", org.jooq.impl.SQLDataType.INTEGER, this, "Primary identifier dbxref - The\nunique global OBO identifier for this cvterm.  ");

    /**
     * The column <code>public.cv.status</code>.
     */
    public final TableField<CvRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<CvRecord, Object> PROPS = createField("props", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * Create a <code>public.cv</code> table reference
     */
    public Cv() {
        this(DSL.name("cv"), null);
    }

    /**
     * Create an aliased <code>public.cv</code> table reference
     */
    public Cv(String alias) {
        this(DSL.name(alias), CV);
    }

    /**
     * Create an aliased <code>public.cv</code> table reference
     */
    public Cv(Name alias) {
        this(alias, CV);
    }

    private Cv(Name alias, Table<CvRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cv(Name alias, Table<CvRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "A term, class, universal or type within an\nontology or controlled vocabulary.  This table is also used for\nrelations and properties. cvterms constitute nodes in the graph\ndefined by the collection of cvterms and cvterm_relationships.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CV_CVGROUPID, Indexes.IDX_CV_DBXREFID, Indexes.IDX_CV_TERM, Indexes.PK_CV, Indexes.UNIQUE_CVTERM_TERM_CVGROUPID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CvRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CvRecord> getPrimaryKey() {
        return Keys.PK_CV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CvRecord>> getKeys() {
        return Arrays.<UniqueKey<CvRecord>>asList(Keys.PK_CV, Keys.UNIQUE_CVTERM_TERM_CVGROUPID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CvRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CvRecord, ?>>asList(Keys.CV__CV_CVGROUPID_FKEY, Keys.CV__CV_DBXREFID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cv as(String alias) {
        return new Cv(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cv as(Name alias) {
        return new Cv(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cv rename(String name) {
        return new Cv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cv rename(Name name) {
        return new Cv(name, null);
    }
}
