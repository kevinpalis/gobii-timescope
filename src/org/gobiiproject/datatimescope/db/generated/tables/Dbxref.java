/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.DbxrefRecord;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A unique, global, public, stable identifier. Not necessarily an external 
 * reference - can reference data items inside the particular instance being 
 * used. Typically a row in a table can be uniquely identified with a primary 
 * identifier (called dbxref_id); a table may also have secondary identifiers 
 * (in a linking table &lt;T&gt;_dbxref). A dbxref is generally written as 
 * &lt;DB&gt;:&lt;ACCESSION&gt; or as &lt;DB&gt;:&lt;ACCESSION&gt;:&lt;VERSION&gt;.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dbxref extends TableImpl<DbxrefRecord> {

    private static final long serialVersionUID = -272076516;

    /**
     * The reference instance of <code>public.dbxref</code>
     */
    public static final Dbxref DBXREF = new Dbxref();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbxrefRecord> getRecordType() {
        return DbxrefRecord.class;
    }

    /**
     * The column <code>public.dbxref.dbxref_id</code>.
     */
    public final TableField<DbxrefRecord, Integer> DBXREF_ID = createField("dbxref_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dbxref_dbxref_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dbxref.accession</code>. The local part of the identifier. Guaranteed by the db authority to be unique for that db.
     */
    public final TableField<DbxrefRecord, String> ACCESSION = createField("accession", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "The local part of the identifier. Guaranteed by the db authority to be unique for that db.");

    /**
     * The column <code>public.dbxref.ver</code>.
     */
    public final TableField<DbxrefRecord, String> VER = createField("ver", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dbxref.description</code>.
     */
    public final TableField<DbxrefRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dbxref.db_name</code>. source name, ex. EDAM Ontology
A database authority. Typical databases in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this shortened form, which is unique within the
bioinformatics and biomedical realm. 
     */
    public final TableField<DbxrefRecord, String> DB_NAME = createField("db_name", org.jooq.impl.SQLDataType.CLOB, this, "source name, ex. EDAM Ontology\nA database authority. Typical databases in\nbioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority\nis generally known by this shortened form, which is unique within the\nbioinformatics and biomedical realm. ");

    /**
     * The column <code>public.dbxref.url</code>.
     */
    public final TableField<DbxrefRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DbxrefRecord, Object> PROPS = createField("props", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * Create a <code>public.dbxref</code> table reference
     */
    public Dbxref() {
        this(DSL.name("dbxref"), null);
    }

    /**
     * Create an aliased <code>public.dbxref</code> table reference
     */
    public Dbxref(String alias) {
        this(DSL.name(alias), DBXREF);
    }

    /**
     * Create an aliased <code>public.dbxref</code> table reference
     */
    public Dbxref(Name alias) {
        this(alias, DBXREF);
    }

    private Dbxref(Name alias, Table<DbxrefRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dbxref(Name alias, Table<DbxrefRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "A unique, global, public, stable identifier. Not necessarily an external reference - can reference data items inside the particular instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <DB>:<ACCESSION> or as <DB>:<ACCESSION>:<VERSION>.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DBXREF_PKEY, Indexes.IDX_DBXREF_ACCESSION, Indexes.IDX_DBXREF_VER, Indexes.UNIQUE_DBXREF_ACCESSION_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DbxrefRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DBXREF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DbxrefRecord> getPrimaryKey() {
        return Keys.DBXREF_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DbxrefRecord>> getKeys() {
        return Arrays.<UniqueKey<DbxrefRecord>>asList(Keys.DBXREF_PKEY, Keys.UNIQUE_DBXREF_ACCESSION_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dbxref as(String alias) {
        return new Dbxref(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dbxref as(Name alias) {
        return new Dbxref(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dbxref rename(String name) {
        return new Dbxref(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dbxref rename(Name name) {
        return new Dbxref(name, null);
    }
}
