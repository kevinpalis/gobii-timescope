/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GetminimalmarkermetadatabydatasetandmapRecord;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Getminimalmarkermetadatabydatasetandmap extends TableImpl<GetminimalmarkermetadatabydatasetandmapRecord> {

    private static final long serialVersionUID = 286568991;

    /**
     * The reference instance of <code>public.getminimalmarkermetadatabydatasetandmap</code>
     */
    public static final Getminimalmarkermetadatabydatasetandmap GETMINIMALMARKERMETADATABYDATASETANDMAP = new Getminimalmarkermetadatabydatasetandmap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetminimalmarkermetadatabydatasetandmapRecord> getRecordType() {
        return GetminimalmarkermetadatabydatasetandmapRecord.class;
    }

    /**
     * The column <code>public.getminimalmarkermetadatabydatasetandmap.marker_name</code>.
     */
    public final TableField<GetminimalmarkermetadatabydatasetandmapRecord, String> MARKER_NAME = createField("marker_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalmarkermetadatabydatasetandmap.alleles</code>.
     */
    public final TableField<GetminimalmarkermetadatabydatasetandmapRecord, String> ALLELES = createField("alleles", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.getminimalmarkermetadatabydatasetandmap.chrom</code>.
     */
    public final TableField<GetminimalmarkermetadatabydatasetandmapRecord, String> CHROM = createField("chrom", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.getminimalmarkermetadatabydatasetandmap.pos</code>.
     */
    public final TableField<GetminimalmarkermetadatabydatasetandmapRecord, BigDecimal> POS = createField("pos", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.getminimalmarkermetadatabydatasetandmap.strand</code>.
     */
    public final TableField<GetminimalmarkermetadatabydatasetandmapRecord, String> STRAND = createField("strand", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.getminimalmarkermetadatabydatasetandmap</code> table reference
     */
    public Getminimalmarkermetadatabydatasetandmap() {
        this(DSL.name("getminimalmarkermetadatabydatasetandmap"), null);
    }

    /**
     * Create an aliased <code>public.getminimalmarkermetadatabydatasetandmap</code> table reference
     */
    public Getminimalmarkermetadatabydatasetandmap(String alias) {
        this(DSL.name(alias), GETMINIMALMARKERMETADATABYDATASETANDMAP);
    }

    /**
     * Create an aliased <code>public.getminimalmarkermetadatabydatasetandmap</code> table reference
     */
    public Getminimalmarkermetadatabydatasetandmap(Name alias) {
        this(alias, GETMINIMALMARKERMETADATABYDATASETANDMAP);
    }

    private Getminimalmarkermetadatabydatasetandmap(Name alias, Table<GetminimalmarkermetadatabydatasetandmapRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private Getminimalmarkermetadatabydatasetandmap(Name alias, Table<GetminimalmarkermetadatabydatasetandmapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getminimalmarkermetadatabydatasetandmap as(String alias) {
        return new Getminimalmarkermetadatabydatasetandmap(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Getminimalmarkermetadatabydatasetandmap as(Name alias) {
        return new Getminimalmarkermetadatabydatasetandmap(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getminimalmarkermetadatabydatasetandmap rename(String name) {
        return new Getminimalmarkermetadatabydatasetandmap(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Getminimalmarkermetadatabydatasetandmap rename(Name name) {
        return new Getminimalmarkermetadatabydatasetandmap(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Getminimalmarkermetadatabydatasetandmap call(Integer datasetid, Integer mapid) {
        return new Getminimalmarkermetadatabydatasetandmap(DSL.name(getName()), null, new Field[] { 
              DSL.val(datasetid, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(mapid, org.jooq.impl.SQLDataType.INTEGER)
        });
    }

    /**
     * Call this table-valued function
     */
    public Getminimalmarkermetadatabydatasetandmap call(Field<Integer> datasetid, Field<Integer> mapid) {
        return new Getminimalmarkermetadatabydatasetandmap(DSL.name(getName()), null, new Field[] { 
              datasetid
            , mapid
        });
    }
}
