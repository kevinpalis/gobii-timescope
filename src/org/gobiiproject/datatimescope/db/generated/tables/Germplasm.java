/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.GermplasmRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Germplasm extends TableImpl<GermplasmRecord> {

    private static final long serialVersionUID = -769005939;

    /**
     * The reference instance of <code>public.germplasm</code>
     */
    public static final Germplasm GERMPLASM = new Germplasm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GermplasmRecord> getRecordType() {
        return GermplasmRecord.class;
    }

    /**
     * The column <code>public.germplasm.germplasm_id</code>.
     */
    public final TableField<GermplasmRecord, Integer> GERMPLASM_ID = createField("germplasm_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('germplasm_germplasm_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.germplasm.name</code>.
     */
    public final TableField<GermplasmRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.germplasm.external_code</code>.
     */
    public final TableField<GermplasmRecord, String> EXTERNAL_CODE = createField("external_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.germplasm.species_id</code>.
     */
    public final TableField<GermplasmRecord, Integer> SPECIES_ID = createField("species_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.germplasm.type_id</code>.
     */
    public final TableField<GermplasmRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.germplasm.created_by</code>.
     */
    public final TableField<GermplasmRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.germplasm.created_date</code>.
     */
    public final TableField<GermplasmRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.germplasm.modified_by</code>.
     */
    public final TableField<GermplasmRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.germplasm.modified_date</code>.
     */
    public final TableField<GermplasmRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.germplasm.status</code>.
     */
    public final TableField<GermplasmRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.germplasm.code</code>.
     */
    public final TableField<GermplasmRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<GermplasmRecord, Object> PROPS = createField("props", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "");

    /**
     * Create a <code>public.germplasm</code> table reference
     */
    public Germplasm() {
        this(DSL.name("germplasm"), null);
    }

    /**
     * Create an aliased <code>public.germplasm</code> table reference
     */
    public Germplasm(String alias) {
        this(DSL.name(alias), GERMPLASM);
    }

    /**
     * Create an aliased <code>public.germplasm</code> table reference
     */
    public Germplasm(Name alias) {
        this(alias, GERMPLASM);
    }

    private Germplasm(Name alias, Table<GermplasmRecord> aliased) {
        this(alias, aliased, null);
    }

    private Germplasm(Name alias, Table<GermplasmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_GERMPLASM_EXTERNAL_CODE, Indexes.IDX_GERMPLASM_NAME, Indexes.IDX_GERMPLASM_PROPS, Indexes.IDX_GERMPLASM_SPECIES_ID, Indexes.IDX_GERMPLASM_STATUS, Indexes.IDX_GERMPLASM_TYPE_ID, Indexes.PK_GERMPLASM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GermplasmRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GERMPLASM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GermplasmRecord> getPrimaryKey() {
        return Keys.PK_GERMPLASM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GermplasmRecord>> getKeys() {
        return Arrays.<UniqueKey<GermplasmRecord>>asList(Keys.PK_GERMPLASM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GermplasmRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GermplasmRecord, ?>>asList(Keys.GERMPLASM__GERMPLASM_SPECIES_ID_FKEY, Keys.GERMPLASM__GERMPLASM_GERMPLASM_TYPE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Germplasm as(String alias) {
        return new Germplasm(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Germplasm as(Name alias) {
        return new Germplasm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Germplasm rename(String name) {
        return new Germplasm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Germplasm rename(Name name) {
        return new Germplasm(name, null);
    }
}
