/*
 * This file is generated by jOOQ.
*/
package org.gobiiproject.datatimescope.db.generated.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gobiiproject.datatimescope.db.generated.Indexes;
import org.gobiiproject.datatimescope.db.generated.Keys;
import org.gobiiproject.datatimescope.db.generated.Public;
import org.gobiiproject.datatimescope.db.generated.tables.records.LinkageGroupRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This table will contain different linkage groups, ie. Chromosome 1, Chromosome 
 * 2, etc. along with their respective start and stop boundaries.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LinkageGroup extends TableImpl<LinkageGroupRecord> {

    private static final long serialVersionUID = -1592470727;

    /**
     * The reference instance of <code>public.linkage_group</code>
     */
    public static final LinkageGroup LINKAGE_GROUP = new LinkageGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinkageGroupRecord> getRecordType() {
        return LinkageGroupRecord.class;
    }

    /**
     * The column <code>public.linkage_group.linkage_group_id</code>.
     */
    public final TableField<LinkageGroupRecord, Integer> LINKAGE_GROUP_ID = createField("linkage_group_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('linkage_group_linkage_group_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.linkage_group.name</code>. ex. Chromosome 1, Chromosome 2, ..., ChromosomeN, LG01, LG02, etc.
     */
    public final TableField<LinkageGroupRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "ex. Chromosome 1, Chromosome 2, ..., ChromosomeN, LG01, LG02, etc.");

    /**
     * The column <code>public.linkage_group.start</code>. Start of the linkage group. 0-based, interbased coordinates.
     */
    public final TableField<LinkageGroupRecord, Integer> START = createField("start", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Start of the linkage group. 0-based, interbased coordinates.");

    /**
     * The column <code>public.linkage_group.stop</code>. The maximum position in the linkage group, ex. 200, 200000000

     */
    public final TableField<LinkageGroupRecord, Integer> STOP = createField("stop", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "The maximum position in the linkage group, ex. 200, 200000000\n");

    /**
     * The column <code>public.linkage_group.map_id</code>. Foreign key to the Map table. This defines which map the linkage group belongs to.
     */
    public final TableField<LinkageGroupRecord, Integer> MAP_ID = createField("map_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key to the Map table. This defines which map the linkage group belongs to.");

    /**
     * The column <code>public.linkage_group.created_by</code>.
     */
    public final TableField<LinkageGroupRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.linkage_group.created_date</code>.
     */
    public final TableField<LinkageGroupRecord, Date> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.linkage_group.modified_by</code>.
     */
    public final TableField<LinkageGroupRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.linkage_group.modified_date</code>.
     */
    public final TableField<LinkageGroupRecord, Date> MODIFIED_DATE = createField("modified_date", org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * Create a <code>public.linkage_group</code> table reference
     */
    public LinkageGroup() {
        this(DSL.name("linkage_group"), null);
    }

    /**
     * Create an aliased <code>public.linkage_group</code> table reference
     */
    public LinkageGroup(String alias) {
        this(DSL.name(alias), LINKAGE_GROUP);
    }

    /**
     * Create an aliased <code>public.linkage_group</code> table reference
     */
    public LinkageGroup(Name alias) {
        this(alias, LINKAGE_GROUP);
    }

    private LinkageGroup(Name alias, Table<LinkageGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private LinkageGroup(Name alias, Table<LinkageGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "This table will contain different linkage groups, ie. Chromosome 1, Chromosome 2, etc. along with their respective start and stop boundaries.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_LINKAGE_GROUP_MAP_ID, Indexes.IDX_LINKAGE_GROUP_NAME, Indexes.PK_LINKAGE_GROUP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LinkageGroupRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LINKAGE_GROUP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LinkageGroupRecord> getPrimaryKey() {
        return Keys.PK_LINKAGE_GROUP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LinkageGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<LinkageGroupRecord>>asList(Keys.PK_LINKAGE_GROUP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LinkageGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LinkageGroupRecord, ?>>asList(Keys.LINKAGE_GROUP__LINKAGE_GROUP_MAP_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LinkageGroup as(String alias) {
        return new LinkageGroup(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LinkageGroup as(Name alias) {
        return new LinkageGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LinkageGroup rename(String name) {
        return new LinkageGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LinkageGroup rename(Name name) {
        return new LinkageGroup(name, null);
    }
}
